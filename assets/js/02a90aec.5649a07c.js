"use strict";(self.webpackChunkocelot_website=self.webpackChunkocelot_website||[]).push([[2858],{9674:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tutorial/tutorial-photons/pfs_6_spectral_filtering","title":"6. Spectral Filtering","description":"This notebook was created by Svitozar Serkez. Source and license info is on GitHub. August 2019.","source":"@site/docs/tutorial/tutorial-photons/pfs_6_spectral_filtering.md","sourceDirName":"tutorial/tutorial-photons","slug":"/tutorial/tutorial-photons/pfs_6_spectral_filtering","permalink":"/docs/tutorial/tutorial-photons/pfs_6_spectral_filtering","draft":false,"unlisted":false,"editUrl":"https://github.com/ocelot-collab/ocelot-collab.github.io/tree/main/docs/tutorial/tutorial-photons/pfs_6_spectral_filtering.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"6. Spectral Filtering"},"sidebar":"tutorialSidebar","previous":{"title":"5. SASE estimation and imitation","permalink":"/docs/tutorial/tutorial-photons/pfs_5_SASE_Estimator_and_Imitator"}}');var o=t(4848),r=t(8453);const l={sidebar_position:6,title:"6. Spectral Filtering"},s="6. Spectral Filtering",a={},c=[];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("small",{children:(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.em,{children:["This notebook was created by Svitozar Serkez. Source and license info is on ",(0,o.jsx)(n.a,{href:"https://github.com/ocelot-collab/ocelot",children:"GitHub"}),". August 2019."]})})}),"\n",(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"6-spectral-filtering",children:(0,o.jsx)(n.a,{href:"https://github.com/ocelot-collab/ocelot/blob/dev/demos/ipython_tutorials/pfs_6_spectral_filtering.ipynb",children:"6. Spectral Filtering"})})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import numpy as np\nimport logging\n\nimport ocelot\nfrom ocelot import *\nfrom ocelot.cpbd.beam import *\nfrom ocelot.rad.fel_estimator import *\nfrom ocelot.gui.beam_plot import *\nfrom ocelot.gui.dfl_plot import *\n\n#ocelog.setLevel(logging.ERROR)\n#ocelog.setLevel(logging.DEBUG)\nocelog.setLevel(logging.INFO)\nplt.clf()\n#%matplotlib notebook\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"    initializing ocelot...\n\n    <Figure size 640x480 with 0 Axes>\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"E_pohoton = 16000 #central photon energy [eV]\nkwargs={'xlamds':(h_eV_s * speed_of_light / E_pohoton), #[m] - central wavelength\n        'shape':(5,5,1000),           #(x,y,z) shape of field matrix (reversed) to dfl.fld\n        'dgrid':(20e-6,20e-6,20e-6), #(x,y,z) [m] - size of field matrix\n        'power_rms':(3e-6,10e-6,1e-6),#(x,y,z) [m] - rms size of the radiation distribution (gaussian)\n        'power_center':(0,0,None),     #(x,y,z) [m] - position of the radiation distribution\n        'power_angle':(0,0),           #(x,y) [rad] - angle of further radiation propagation\n        'power_waistpos':(-5,-15),     #(Z_x,Z_y) [m] downstrean location of the waist of the beam\n        'wavelength':None,             #central frequency of the radiation, if different from xlamds\n        'zsep':None,                   #distance between slices in z as zsep*xlamds\n        'freq_chirp':0,                #dw/dt=[1/fs**2] - requency chirp of the beam around power_center[2]\n        #'en_pulse':1e-6,               #total energy or max power of the pulse, use only one\n        'power':1e8,\n        'rho':1e-4\n        }\ndfl = imitate_sase_dfl(**kwargs);\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"    [INFO    ] \x1b[0mimitating SASE radiation\x1b[0m\n    [INFO    ] : \x1b[0mgenerating radiation field of shape (nz,ny,nx): (5, 5, 1000)\x1b[0m\n    [INFO    ] : \x1b[0mgenerating 1d radiation field imitating SASE\x1b[0m\n"})}),"\n",(0,o.jsx)(n.p,{children:"plot_dfl(dfl, domains = 'st', figsize=2)\nplot_dfl(dfl, domains = 'sf', figsize=2)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"wig = wigner_dfl(dfl)\nplot_wigner(wig, downsample=2)\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"    [INFO    ] : \x1b[0mcalculating Wigner distribution from dfl (on-axis fillament)\x1b[0m\n    [INFO    ] : : \x1b[0mevaluating wigner distribution from 1 event(s)\x1b[0m\n    [INFO    ] : : \x1b[0mplotting Wigner distribution\x1b[0m\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"png",src:t(1806).A+"",width:"1100",height:"844"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"E_filt = 16000\ndEE_filt = 1e-4\n\ntrf = TransferFunction()\ndfl.to_domain('f')\n\nk0 = 2*np.pi * E_filt / h_eV_s / speed_of_light\ndelta_k = k0 * dEE_filt\n\ntrf.k = dfl.scale_kz()\ntrf.tr = np.exp(-(trf.k-k0)**2 / 2 / delta_k**2)\n\nplot_trf(trf)\n\ndfl_trf(dfl, trf, 'tr', dump_proj=False)\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"png",src:t(2856).A+"",width:"742",height:"1017"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"    [INFO    ] \x1b[0mmultiplying dfl by trf\x1b[0m\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"dfl_trf(dfl, trf, 'tr', dump_proj=False)\ndfl.to_domain('t')\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"    [INFO    ] \x1b[0mmultiplying dfl by trf\x1b[0m\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"wig = wigner_dfl(dfl)\nplot_wigner(wig, downsample=2)\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"    [INFO    ] : \x1b[0mcalculating Wigner distribution from dfl (on-axis fillament)\x1b[0m\n    [INFO    ] : : \x1b[0mevaluating wigner distribution from 1 event(s)\x1b[0m\n    [INFO    ] : : \x1b[0mplotting Wigner distribution\x1b[0m\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"png",src:t(899).A+"",width:"1100",height:"844"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1806:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/pfs_6_spectral_filtering_5_1-87115e41725bd6c03d8399c8efa1bab8.png"},2856:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/pfs_6_spectral_filtering_6_0-1625698dc9a4d9c7f96810556b7dd59c.png"},899:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/pfs_6_spectral_filtering_8_1-a8806a8bae88f5db00e57d571a80f21f.png"},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var i=t(6540);const o={},r=i.createContext(o);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);