"use strict";(self.webpackChunkocelot_website=self.webpackChunkocelot_website||[]).push([[2829],{6962:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"tutorial/tutorial-beam-dynamics/dba","title":"1. Linear Optics. DBA","description":"This notebook was created by Sergey Tomin (sergey.tomin@desy.de). Source and license info is on GitHub. January 2018.","source":"@site/docs/tutorial/tutorial-beam-dynamics/1_dba.md","sourceDirName":"tutorial/tutorial-beam-dynamics","slug":"/tutorial/tutorial-beam-dynamics/dba","permalink":"/docs/tutorial/tutorial-beam-dynamics/dba","draft":false,"unlisted":false,"editUrl":"https://github.com/ocelot-collab/ocelot/docs/tutorial/tutorial-beam-dynamics/1_dba.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"1. Linear Optics. DBA"},"sidebar":"tutorialSidebar","previous":{"title":"Tutorial - Beam Dynamics","permalink":"/docs/category/tutorial---beam-dynamics"},"next":{"title":"2. Tracking","permalink":"/docs/tutorial/tutorial-beam-dynamics/tracking"}}');var i=t(4848),o=t(8453);const s={sidebar_position:1,title:"1. Linear Optics. DBA"},l="Double Bend Achromat",r={},c=[{value:"Creating lattice",id:"creating-lattice",level:2},{value:"Optical function calculation",id:"optical-function-calculation",level:3},{value:"You will see the Twiss object contains more information than just Twiss parameters.",id:"you-will-see-the-twiss-object-contains-more-information-than-just-twiss-parameters",level:5},{value:"another way to get periodic solution is",id:"another-way-to-get-periodic-solution-is",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h5:"h5",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("small",{children:(0,i.jsxs)(e.p,{children:["This notebook was created by Sergey Tomin (",(0,i.jsx)(e.a,{href:"mailto:sergey.tomin@desy.de",children:"sergey.tomin@desy.de"}),"). Source and license info is on ",(0,i.jsx)(e.a,{href:"https://github.com/ocelot-collab/ocelot",children:"GitHub"}),". January 2018."]})}),"\n",(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"double-bend-achromat",children:"Double Bend Achromat"})}),"\n",(0,i.jsx)(e.p,{children:"We designed a simple lattice to demonstrate the basic concepts and syntax of the optics functions calculation.\nAlso, we chose DBA to demonstrate the periodic solution for the optical functions calculation."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from __future__ import print_function\n\n# the output of plotting commands is displayed inline within frontends, \n# directly below the code cell that produced it\n%matplotlib inline\n\n# import from Ocelot main modules and functions\nfrom ocelot import *\n\n# import from Ocelot graphical modules\nfrom ocelot.gui.accelerator import *\n"})}),"\n",(0,i.jsx)(e.h2,{id:"creating-lattice",children:"Creating lattice"}),"\n",(0,i.jsx)(e.p,{children:"Ocelot has following elements: Drift, Quadrupole, Sextupole, Octupole, Bend, SBend, RBend, Edge, Multipole, Hcor, Vcor, Solenoid, Cavity, Monitor, Marker, Undulator."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# defining of the drifts\nD1 = Drift(l=2.)\nD2 = Drift(l=0.6)\nD3 = Drift(l=0.3)\nD4 = Drift(l=0.7)\nD5 = Drift(l=0.9)\nD6 = Drift(l=0.2)\n\n# defining of the quads\nQ1 = Quadrupole(l=0.4, k1=-1.3)\nQ2 = Quadrupole(l=0.8, k1=1.4)\nQ3 = Quadrupole(l=0.4, k1=-1.7)\nQ4 = Quadrupole(l=0.5, k1=1.3)\n\n# defining of the bending magnet\nB = Bend(l=2.7, k1=-.06, angle=2*pi/16., e1=pi/16., e2=pi/16.)\n\n# defining of the sextupoles\nSF = Sextupole(l=0.01, k2=1.5) #random value\nSD = Sextupole(l=0.01, k2=-1.5) #random value\n\n# cell creating\ncell = (D1, Q1, D2, Q2, D3, Q3, D4, B, D5, SD, D5, SF, D6, Q4, D6,\n        SF, D5, SD, D5, B, D4, Q3, D3, Q2, D2, Q1, D1)\n"})}),"\n",(0,i.jsx)(e.p,{children:"cell"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"    (<Drift: name=ID_41638795_ at 0x2815f6aa0>,\n     <Quadrupole: name=ID_48212357_ at 0x2815f5d50>,\n     <Drift: name=ID_92167354_ at 0x2815f6260>,\n     <Quadrupole: name=ID_62144763_ at 0x2815f5de0>,\n     <Drift: name=ID_65974384_ at 0x2815f69e0>,\n     <Quadrupole: name=ID_10916876_ at 0x2815f5db0>,\n     <Drift: name=ID_95483235_ at 0x2815f4850>,\n     <Bend: name=ID_90868229_ at 0x2815f5f60>,\n     <Drift: name=ID_55934688_ at 0x2815f4ac0>,\n     <Sextupole: name=ID_22464080_ at 0x11818fee0>,\n     <Drift: name=ID_55934688_ at 0x2815f4ac0>,\n     <Sextupole: name=ID_30803941_ at 0x2815f5ff0>,\n     <Drift: name=ID_49578218_ at 0x2815f4eb0>,\n     <Quadrupole: name=ID_27836471_ at 0x2815f5ed0>,\n     <Drift: name=ID_49578218_ at 0x2815f4eb0>,\n     <Sextupole: name=ID_30803941_ at 0x2815f5ff0>,\n     <Drift: name=ID_55934688_ at 0x2815f4ac0>,\n     <Sextupole: name=ID_22464080_ at 0x11818fee0>,\n     <Drift: name=ID_55934688_ at 0x2815f4ac0>,\n     <Bend: name=ID_90868229_ at 0x2815f5f60>,\n     <Drift: name=ID_95483235_ at 0x2815f4850>,\n     <Quadrupole: name=ID_10916876_ at 0x2815f5db0>,\n     <Drift: name=ID_65974384_ at 0x2815f69e0>,\n     <Quadrupole: name=ID_62144763_ at 0x2815f5de0>,\n     <Drift: name=ID_92167354_ at 0x2815f6260>,\n     <Quadrupole: name=ID_48212357_ at 0x2815f5d50>,\n     <Drift: name=ID_41638795_ at 0x2815f6aa0>)\n"})}),"\n",(0,i.jsxs)(e.p,{children:["*hint: to see a simple description of the function put cursor inside () and press ",(0,i.jsx)(e.strong,{children:"Shift-Tab"})," or you can type sign ",(0,i.jsx)(e.strong,{children:"?"})," before function. To extend dialog window press ",(0,i.jsx)(e.strong,{children:"+"})," *\nAlso, one can get more info about element just using ",(0,i.jsx)(e.code,{children:"print(element)"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# all infro about an element can be seen with \nprint(B)\n    Bend(l=2.70000, angle=3.926991e-01, e1=1.963495e-01, e2=1.963495e-01, eid="ID_90868229_")\n'})}),"\n",(0,i.jsx)(e.p,{children:"The cell is a list of the simple objects which contain a physical information of lattice elements such as length, strength, voltage and so on. In order to create a transport map for every element and bind it with lattice object we have to create new Ocelot object - MagneticLattice() which makes these things automatically."}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:'MagneticLattice(sequence, start=None, stop=None, method={"global": TransferMap})'}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"sequence - list of the elements,"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"other parameters we will consider in tutorial N2."}),"\n",(0,i.jsx)("mark",{children:"Note, in the current version of OCELOT, transfer map belongs to element. See example"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# R matrix can be printed for any particular element.\nprint(Q1.R(energy=0))\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"    [array([[ 1.10581521,  0.4140116 ,  0.        ,  0.        ,  0.        ,\n             0.        ],\n           [ 0.53821508,  1.10581521,  0.        ,  0.        ,  0.        ,\n             0.        ],\n           [ 0.        ,  0.        ,  0.89779021,  0.38627683,  0.        ,\n             0.        ],\n           [ 0.        ,  0.        , -0.50215988,  0.89779021,  0.        ,\n             0.        ],\n           [ 0.        ,  0.        ,  0.        ,  0.        ,  1.        ,\n             0.        ],\n           [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n             1.        ]])]\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# or you can directly get transfer maps \nQ2.tms\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"    [<ocelot.cpbd.transformations.transfer_map.TransferMap at 0x2815f5ea0>]\n\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'lat = MagneticLattice(cell)\n\n# to see total length of the lattice \nprint("length of the cell: ", lat.totalLen, "m")\n\n# or, for example, you can get R matrix for whole lattice\n\nB, R, T = lat.transfer_maps(energy=0)\nprint(R)\n\n    length of the cell:  20.34 m\n    [[ 0.68401288  0.38454837  0.          0.          0.          0.05268746]\n     [-1.38376969  0.68401288  0.          0.          0.          0.23072876]\n     [ 0.          0.          0.81775255 -0.29733817  0.          0.        ]\n     [ 0.          0.          1.11415489  0.81775255  0.          0.        ]\n     [ 0.23072876  0.05268746  0.          0.          1.          0.02228572]\n     [ 0.          0.          0.          0.          0.          1.        ]]\n'})}),"\n",(0,i.jsx)(e.h3,{id:"optical-function-calculation",children:"Optical function calculation"}),"\n",(0,i.jsx)(e.p,{children:"Uses:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"twiss() function and,"}),"\n",(0,i.jsx)(e.li,{children:"Twiss() object contains Twiss parameters and other information at one certain position (s) of lattice"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["To calculate Twiss parameters you have to run ",(0,i.jsx)(e.strong,{children:"twiss(lattice, tws0=None, nPoints=None)"})," function. If you want to get a periodic solution leave tws0 by default."]}),"\n",(0,i.jsx)(e.p,{children:"You can change the number of points over the cell, If nPoints=None, then Twiss parameters are calculated at the end of each element.\ntwiss() function returns list of Twiss() objects."}),"\n",(0,i.jsx)(e.h5,{id:"you-will-see-the-twiss-object-contains-more-information-than-just-twiss-parameters",children:"You will see the Twiss object contains more information than just Twiss parameters."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'tws = twiss(lat, nPoints=1000)\n\n# to see Twiss parameters at the beginning of the cell, uncomment next line\n# print(tws[0])\nprint("length = ", len(tws))\n# to see Twiss parameters at the end of the cell, uncomment next line\nprint(tws[-1])\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"    length =  1000\n    emit_x  = 0.0\n    emit_y  = 0.0\n    beta_x  = 0.5271613695963895\n    beta_y  = 0.5165977895295946\n    alpha_x = -4.440892098500626e-16\n    alpha_y = 6.661338147750939e-15\n    gamma_x = 1.8969523521149319\n    gamma_y = 1.9357419258618653\n    Dx      = 0.16673927708143915\n    Dy      = 0.0\n    Dxp     = 4.440892098500626e-16\n    Dyp     = 0.0\n    mux     = 7.100731992120578\n    muy     = 5.669884351617213\n    nu_x    = 1.1301165961167512\n    nu_y    = 0.9023901213192655\n    E       = 0.0\n    s        = 20.34\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# plot optical functions.\nplot_opt_func(lat, tws, top_plot = ["Dx", "Dy"], legend=False, font_size=10)\nplt.show()\n\n# you also can use standard matplotlib functions for plotting\n#s = [tw.s for tw in tws]\n#bx = [tw.beta_x for tw in tws]\n#plt.plot(s, bx)\n#plt.show()\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"png",src:t(5255).A+"",width:"625",height:"485"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# you can play with quadrupole strength and try to make achromat\nQ4.k1 = 1.18\n\n# to make achromat uncomment next line\n# Q4.k1 =  1.18543769836\n# To use matching function, please see ocelot/demos/ebeam/dba.py \n\n# updating transfer maps after changing element parameters. \n#lat.update_transfer_maps() - not needed anymore\n\n# recalculate twiss parameters. Argument nPoints is None by default - Twiss is calculating at the end of each element. \n# If you want smooth twiss functions you can set number of points. \ntws=twiss(lat, nPoints=1000)\n\nplot_opt_func(lat, tws, legend=False)\nplt.show()\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"png",src:t(2743).A+"",width:"632",height:"487"})}),"\n",(0,i.jsx)(e.h1,{id:"more-about-periodic-solution-for-the-twiss-function",children:"More about periodic solution for the Twiss function"}),"\n",(0,i.jsx)(e.p,{children:"In some cases, one needs to quickly find a periodic solution. Here is a simple example with Cavity element:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'d = Drift(l=1)\nqf_h = Quadrupole(l=0.3/2, k1=1)\nqd = Quadrupole(l=0.3, k1=-1)\nc = Cavity(l=1, v=0.1, phi=10)\n\nfodo_cell = (qf_h, d, c, d, qd, d,c,d,qf_h)\nlat = MagneticLattice(fodo_cell)\n\ntws0 = Twiss(E=0.5) # E = 0.5 GeV. Initial energy is required for the focusing effect caclulation in the Cavities \ntws = twiss(lat, tws0)\nplot_opt_func(lat, tws)\nplt.show()\nprint("final Twiss:", tws[-1])\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"png",src:t(8889).A+"",width:"647",height:"487"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"    final Twiss: emit_x  = 0.0\n    emit_y  = 0.0\n    beta_x  = 10.788391405898434\n    beta_y  = 3.804736768160358\n    alpha_x = -0.009168816187736392\n    alpha_y = -0.005202303371245248\n    gamma_x = 0.09270001704271681\n    gamma_y = 0.26283738531638107\n    Dx      = 0.0\n    Dy      = 0.0\n    Dxp     = 0.0\n    Dyp     = 0.0\n    mux     = 1.0722774502509878\n    muy     = 1.0719541872890197\n    nu_x    = 0.1706582565734186\n    nu_y    = 0.17060680767510286\n    E       = 0.6969615506024416\n    s        = 6.6\n"})}),"\n",(0,i.jsx)(e.h3,{id:"another-way-to-get-periodic-solution-is",children:"another way to get periodic solution is"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"tws_p = lat.periodic_twiss(tws=tws0)\nprint(tws_p)\n\n\n    emit_x  = 0.0\n    emit_y  = 0.0\n    beta_x  = 10.788391405898436\n    beta_y  = 3.804736768160356\n    alpha_x = -0.00916881618773698\n    alpha_y = -0.005202303371245172\n    gamma_x = 0.0927000170427168\n    gamma_y = 0.26283738531638123\n    Dx      = 0.0\n    Dy      = 0.0\n    Dxp     = 0.0\n    Dyp     = 0.0\n    mux     = 0.0\n    muy     = 0.0\n    nu_x    = 0.0\n    nu_y    = 0.0\n    E       = 0.5\n    s        = 0.0\n"})})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},5255:(n,e,t)=>{t.d(e,{A:()=>a});const a=t.p+"assets/images/1_introduction_19_0-0e65512428814c65ff45ca60cba59d52.png"},2743:(n,e,t)=>{t.d(e,{A:()=>a});const a=t.p+"assets/images/1_introduction_20_0-4732e37272fc828a17d01cf30abb8c0b.png"},8889:(n,e,t)=>{t.d(e,{A:()=>a});const a=t.p+"assets/images/1_introduction_22_0-96190b7683027e98828ac17689dcd587.png"},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>l});var a=t(6540);const i={},o=a.createContext(i);function s(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);