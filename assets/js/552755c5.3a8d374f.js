"use strict";(self.webpackChunkocelot_website=self.webpackChunkocelot_website||[]).push([[4290],{4134:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"tutorial/tutorial-photons/pfs_5_SASE_Estimator_and_Imitator","title":"5. SASE estimation and imitation","description":"This notebook was created by Svitozar Serkez. Source and license info is on GitHub. August 2019.","source":"@site/docs/tutorial/tutorial-photons/pfs_5_SASE_Estimator_and_Imitator.md","sourceDirName":"tutorial/tutorial-photons","slug":"/tutorial/tutorial-photons/pfs_5_SASE_Estimator_and_Imitator","permalink":"/docs/tutorial/tutorial-photons/pfs_5_SASE_Estimator_and_Imitator","draft":false,"unlisted":false,"editUrl":"https://github.com/ocelot-collab/ocelot/docs/tutorial/tutorial-photons/pfs_5_SASE_Estimator_and_Imitator.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"5. SASE estimation and imitation"},"sidebar":"tutorialSidebar","previous":{"title":"4. SR Visualization","permalink":"/docs/tutorial/tutorial-photons/pfs_4_synchrotron_radiation_visualization"},"next":{"title":"6. Spectral Filtering","permalink":"/docs/tutorial/tutorial-photons/pfs_6_spectral_filtering"}}');var a=n(4848),s=n(8453);const o={sidebar_position:5,title:"5. SASE estimation and imitation"},r="5. SASE estimation and imitation (unfinished)",l={},d=[{value:"Contents",id:"contents",level:2},{value:"SASE estimator",id:"sase-estimator",level:2},{value:"SASE imitator",id:"sase-imitator",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("small",{children:(0,a.jsx)(t.p,{children:(0,a.jsxs)(t.em,{children:["This notebook was created by Svitozar Serkez. Source and license info is on ",(0,a.jsx)(t.a,{href:"https://github.com/ocelot-collab/ocelot",children:"GitHub"}),". August 2019."]})})}),"\n",(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"5-sase-estimation-and-imitation-unfinished",children:"5. SASE estimation and imitation (unfinished)"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"%matplotlib inline \nimport numpy as np\nimport logging\n\nimport ocelot\nfrom ocelot import *\nfrom ocelot.cpbd.beam import *\nfrom ocelot.rad.fel_estimator import *\nfrom ocelot.gui.beam_plot import *\nfrom ocelot.gui.dfl_plot import *\n\n#ocelog.setLevel(logging.ERROR)\n#ocelog.setLevel(logging.DEBUG)\nocelog.setLevel(logging.INFO)\nplt.clf()\n#%matplotlib notebook\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"    initializing ocelot...\n    <Figure size 640x480 with 0 Axes>\n"})}),"\n",(0,a.jsx)(t.h2,{id:"contents",children:"Contents"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"#estimator",children:"SASE estimator"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"#imitator",children:"SASE imitator"})}),"\n"]}),"\n",(0,a.jsx)("a",{id:"estimatir"}),"\n",(0,a.jsx)(t.h2,{id:"sase-estimator",children:"SASE estimator"}),"\n",(0,a.jsxs)(t.p,{children:["Knowing the electron beam parameters and the magnetic lattice one can estimate the average SASE power at saturation\nAs the electron beam is typically much longer than the cooperation length, one can slice it into regions that would never interact with each other and estimate power growth in each of those regions with MXie (default) ",(0,a.jsx)(t.a,{href:"https://dx.doi.org/10.1016/S0168-9002(00)00114-5",children:"M. Xie, \u201cExact and variational solutions of 3D eigenmodes in high gain FELs,\u201d Nucl. Instruments Methods Phys. Res. Sect. A Accel. Spectrometers, Detect. Assoc. Equip., vol. 445, no. 1\u20133, pp. 59\u201366, 2000"})," or SSY (assumes optimum beta in each slice) ",(0,a.jsx)(t.a,{href:"https://dx.doi.org/10.1016/j.optcom.2004.02.071",children:"E. L. Saldin, E. A. Schneidmiller, and M. V. Yurkov, \u201cDesign formulas for short-wavelength FELs,\u201d Opt. Commun., vol. 235, no. 4\u20136, pp. 415\u2013420, May 2004"})," estimations"]}),"\n",(0,a.jsx)(t.p,{children:"First, let us generate the beam and lattice objects"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"beam = generate_beam(E=14.0, dE=4e-3, I=5000, l_beam=10e-6, emit_n=0.8e-6, beta=40, l_window=30e-6, shape='gaussian', chirp=0.0001)\nplot_beam(beam, figsize=2)\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"    [INFO    ] \x1b[0mgenerating electron beam distribution\x1b[0m\n    [INFO    ] : \x1b[0mplotting beam\x1b[0m\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"png",src:n(9464).A+"",width:"762",height:"551"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"#lat_pkg = create_fel_beamline('EuXFEL_SASE1')\nlat_pkg = create_fel_lattice(\n                    und_N = 35,\n                    und_L = 5,\n                    und_l = 0.04,\n                    und_Kx = 0,\n                    und_Ky = 0,\n                    inters_L = 1.08,\n                    inters_K = 'K_und',\n                    inters_phi=0,\n                    quad_L = 0.4,\n                    quad_K = 0,\n                    phs_L = 0.0,\n                    quad_start = 'd')\n\nE_photon=8000\nbeta_av=20\nprepare_el_optics(beam, lat_pkg, E_photon, beta_av, s=None)\nlat = lat_pkg[0]\n\n#tws0 = Twiss(beam.pk())\n#tws = twiss(lat, tws0=tws0)\n#plot_opt_func(lat, tws, top_plot=[\"E\"], legend=False)\n#plt.show()\n"})}),"\n",(0,a.jsx)(t.p,{children:"There are several ways to estimate SASE power growth"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"#fel = beam2fel(beam, lu=0.04, K_peak=3, iwityp=0)\nfel = beamlat2fel(beam, lat, smear_m=None, method='mxie', qf=0) #slower, propagates the beam through the magnettic lattice to estimate average beta of poorly matched slices\n#fel = parraylat2fel(parray, lat, step=1e-7) # would convert parray to beam and execute beamlat2fel\nprint('zsat = {:.2f}'.format(fel.z_sat_min))\nprint('E_pulse_sat = {:.2f} uJ'.format(fel.E() * 1e6))\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"    [INFO    ] \x1b[0mestimating fel from beam and lat\x1b[0m\n\n\n    zsat = 79.94\n    E_pulse_sat = 1145.56 uJ\n"})}),"\n",(0,a.jsx)(t.p,{children:"Results can be plotted using the following functions"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"#fel.log('print')\nplot_estimator_power_z(fel, und_duty_factor=5/6.08)\nplot_estimator_spectrogram(fel)\nplot_estimator_spectrum(fel)\nplot_estimator_power_evo(fel, und_duty_factor=5/6.08)\nplot_estimator_energy_evo(fel, und_duty_factor=5/6.08)\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"png",src:n(2963).A+"",width:"560",height:"466"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"png",src:n(7402).A+"",width:"614",height:"442"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"png",src:n(8481).A+"",width:"581",height:"451"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"png",src:n(7352).A+"",width:"607",height:"466"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"png",src:n(9495).A+"",width:"610",height:"466"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"png",src:n(9998).A+"",width:"610",height:"466"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"np.trapz(fel.P_sn, fel.s / speed_of_light)\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"    1.8487665968771016e-10\n"})}),"\n",(0,a.jsx)("a",{id:"imitator"}),"\n",(0,a.jsx)(t.h2,{id:"sase-imitator",children:"SASE imitator"}),"\n",(0,a.jsxs)(t.p,{children:["One can imitate SASE by simulating Gaussian noise and multiplying it by power profile and spectrum profile envelopes in the time and frequency domains respectively, see ",(0,a.jsx)(t.a,{href:"https://doi.org/10.1364/OL.35.003441",children:"T. Pfeifer et al. \u201cPartial-coherence method to model experimental free-electron laser pulse statistics\u201d. In: Opt. Lett. 35.20 (2010), p. 3441"}),"\nThe ",(0,a.jsx)(t.code,{children:"imitate_sase_dfl"})," function will yield ",(0,a.jsx)(t.code,{children:"RadiationField"})," object, based on ",(0,a.jsx)(t.code,{children:"generate_gaussian_dfl"}),", except longitudinally both the amplitudes and phases are modified to yield SASE like spectrum and power. Therefore only the spectral properties of SASE radiation are imitated, while transverse distribution is gaussian, which strictly speaking is not the case."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"help(imitate_sase_dfl)\n\nE_pohoton = 16000 #central photon energy [eV]\nkwargs={'xlamds':(h_eV_s * speed_of_light / E_pohoton), #[m] - central wavelength\n        'shape':(101,101,300),           #(x,y,z) shape of field matrix (reversed) to dfl.fld\n        'dgrid':(200e-6,200e-6,15e-6), #(x,y,z) [m] - size of field matrix\n        'power_rms':(3e-6,10e-6,2e-6),#(x,y,z) [m] - rms size of the radiation distribution (gaussian)\n        'power_center':(0,0,None),     #(x,y,z) [m] - position of the radiation distribution\n        'power_angle':(0,0),           #(x,y) [rad] - angle of further radiation propagation\n        'power_waistpos':(-5,-15),     #(Z_x,Z_y) [m] downstrean location of the waist of the beam\n        'wavelength':None,             #central frequency of the radiation, if different from xlamds\n        'zsep':None,                   #distance between slices in z as zsep*xlamds\n        'freq_chirp':0,                #dw/dt=[1/fs**2] - requency chirp of the beam around power_center[2]\n        #'en_pulse':1e-6,               #total energy or max power of the pulse, use only one\n        'power':1e8,\n        'rho':1e-4\n        }\ndfl = imitate_sase_dfl(**kwargs);\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"    [INFO    ] \x1b[0mimitating SASE radiation\x1b[0m\n    [INFO    ] : \x1b[0mgenerating radiation field of shape (nz,ny,nx): (101, 101, 300)\x1b[0m\n    [INFO    ] : \x1b[0mgenerating 1d radiation field imitating SASE\x1b[0m\n\n\n    Help on function imitate_sase_dfl in module ocelot.optics.wave:\n    \n    imitate_sase_dfl(xlamds, rho=0.0002, seed=None, **kwargs)\n        imitation of SASE radiation in 3D\n        \n        xlamds - wavelength of the substracted fast-varying component\n        rho - half of the expected FEL bandwidth\n        **kwargs identical to generate_dfl()\n        \n        returns RadiationField object\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"plot_dfl(dfl, domains = 'st', figsize=2)\nplot_dfl(dfl, domains = 'sf', figsize=2)\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"    [INFO    ] : \x1b[0mplotting radiation field (dfl)\x1b[0m\n    [INFO    ] : \x1b[0m: domains=st\x1b[0m\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"png",src:n(46).A+"",width:"890",height:"563"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"    [INFO    ] : \x1b[0mplotting radiation field (dfl)\x1b[0m\n    [INFO    ] : \x1b[0m: domains=sf\x1b[0m\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"png",src:n(4956).A+"",width:"905",height:"567"})}),"\n",(0,a.jsxs)(t.p,{children:["We can study longitudinal Wigner distribution of this SASE-like radiation.\nextensively discussed in ",(0,a.jsx)(t.a,{href:"https://journals.iucr.org/s/issues/2021/01/00/co5148/",children:"https://journals.iucr.org/s/issues/2021/01/00/co5148/"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"plot_wigner(dfl2wig(dfl, pad=2))\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"    [INFO    ] \x1b[0mcalculating Wigner distribution from dfl (on-axis fillament)\x1b[0m\n    [INFO    ] : \x1b[0mevaluating wigner distribution from 1 event(s)\x1b[0m\n    [INFO    ] : : \x1b[0mplotting Wigner distribution\x1b[0m\n"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"png",src:n(1056).A+"",width:"1100",height:"844"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},2963:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/pfs_5_SASE_Estimator_and_Imitator_10_0-80d312cebb7e4a290f294653cffe873a.png"},7402:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/pfs_5_SASE_Estimator_and_Imitator_10_1-d1e313028bbe3a3c578a259b140b5a1d.png"},8481:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/pfs_5_SASE_Estimator_and_Imitator_10_2-73ab811b28720ae068d1fd9fbcbbf97f.png"},7352:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/pfs_5_SASE_Estimator_and_Imitator_10_3-c4f3b3ab8aef77b58f4332ad518a7c9e.png"},9495:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/pfs_5_SASE_Estimator_and_Imitator_10_4-c3ee3cf44593f762fa418c7d23d61641.png"},9998:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/pfs_5_SASE_Estimator_and_Imitator_10_5-c3ee3cf44593f762fa418c7d23d61641.png"},46:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/pfs_5_SASE_Estimator_and_Imitator_14_1-8eedc680186925bcd81cd9803edf50c4.png"},4956:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/pfs_5_SASE_Estimator_and_Imitator_14_3-7feff337200d1e6bbe5dae08d68fd707.png"},1056:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/pfs_5_SASE_Estimator_and_Imitator_16_1-f5c67b47dca19d782c86a04619dedff3.png"},9464:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/pfs_5_SASE_Estimator_and_Imitator_5_1-866c98361e3dee5b96e295b77925f0bb.png"},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(6540);const a={},s=i.createContext(a);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);