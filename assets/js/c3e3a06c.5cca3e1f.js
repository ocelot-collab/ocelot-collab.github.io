"use strict";(self.webpackChunkocelot_website=self.webpackChunkocelot_website||[]).push([[1975],{1775:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"tutorial/tutorial-beam-dynamics/CorrugatedStructures","title":"10. Corrugated Structure","description":"This notebook was created by Weilun Qin (weilun.qin@desy.de). Feb. 2024.","source":"@site/docs/tutorial/tutorial-beam-dynamics/10_CorrugatedStructures.md","sourceDirName":"tutorial/tutorial-beam-dynamics","slug":"/tutorial/tutorial-beam-dynamics/CorrugatedStructures","permalink":"/docs/tutorial/tutorial-beam-dynamics/CorrugatedStructures","draft":false,"unlisted":false,"editUrl":"https://github.com/ocelot-collab/ocelot-collab.github.io/tree/main/docs/tutorial/tutorial-beam-dynamics/10_CorrugatedStructures.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"title":"10. Corrugated Structure"},"sidebar":"tutorialSidebar","previous":{"title":"9. Accelerator based THz source","permalink":"/docs/tutorial/tutorial-beam-dynamics/thz_source"},"next":{"title":"11. Slotted Foil","permalink":"/docs/tutorial/tutorial-beam-dynamics/slotted_foil"}}');var i=t(4848),r=t(8453);const l={sidebar_position:10,title:"10. Corrugated Structure"},s="10. Corrugated Structure",o={},c=[{value:"Load packages",id:"load-packages",level:2},{value:"Define functions",id:"define-functions",level:2},{value:"Create particle array",id:"create-particle-array",level:2},{value:"Corrugated structure as dechirper",id:"corrugated-structure-as-dechirper",level:2},{value:"Thick lens",id:"thick-lens",level:3},{value:"Corrugated structure as a streaker",id:"corrugated-structure-as-a-streaker",level:2},{value:"Thick lens",id:"thick-lens-1",level:3},{value:"Compare analytical model with numerical waketable",id:"compare-analytical-model-with-numerical-waketable",level:2},{value:"Compare 2nd order Taylor expansion with 3rd order",id:"compare-2nd-order-taylor-expansion-with-3rd-order",level:2}];function p(e){const a={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("small",{children:(0,i.jsx)(a.p,{children:(0,i.jsxs)(a.em,{children:["This notebook was created by Weilun Qin (",(0,i.jsx)(a.a,{href:"mailto:weilun.qin@desy.de",children:"weilun.qin@desy.de"}),"). Feb. 2024."]})})}),"\n",(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"10-corrugated-structure",children:"10. Corrugated Structure"})}),"\n",(0,i.jsxs)(a.p,{children:["In this tutorial, we show a few examples for tracking with parallel-plate corrugated structures. The wakefields model we used are based on analytical wakefield formulas for flat corrugated structures. Details of the wake can be found in ",(0,i.jsx)(a.a,{href:"https://journals.aps.org/prab/abstract/10.1103/PhysRevAccelBeams.26.064402",children:"Short-range wakefields in an L-shaped corrugated structure"}),". Tracking algorithm of the wakefields in OCELOT with a second order Taylor expansion method can be found in ",(0,i.jsx)(a.a,{href:"http://nbviewer.jupyter.org/github/ocelot-collab/ocelot/blob/master/demos/ipython_tutorials/4_wake.ipynb",children:"tutorial N4. Wakefields"}),". Here we also present an extended 3rd order method."]}),"\n",(0,i.jsx)(a.h2,{id:"load-packages",children:"Load packages"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"# the output of plotting commands is displayed inline within frontends,\n# directly below the code cell that produced it\n%matplotlib inline\n\nimport time\n\n# this python library provides generic shallow (copy) and deep copy (deepcopy) operations\nfrom copy import deepcopy\n\n# import from Ocelot main modules and functions\nfrom ocelot import *\nfrom ocelot.cpbd.wake3D import *\nfrom ocelot.adaptors.astra2ocelot import *\nfrom ocelot.adaptors.genesis import *\n\n# import from Ocelot graphical modules\nfrom ocelot.gui.accelerator import *\n\nimport matplotlib as mpl\nfrom matplotlib.colors import LinearSegmentedColormap, to_hex\n\nmpl.rcParams.update({'font.size':20,'axes.labelsize':20,'lines.linewidth':2}) \nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=['#1f77b4','#ff7f0e','#2ca02c'])\n"})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"    initializing ocelot...\n    import: module PYFFTW is not installed. Install it to speed up calculation\n    wave.py: module PYFFTW is not installed. Install it if you want speed up dfl wavefront calculations\n"})}),"\n",(0,i.jsx)(a.h2,{id:"define-functions",children:"Define functions"}),"\n",(0,i.jsxs)(a.p,{children:["We define functions to track with different wake model for easier comparison of the models. We also add artificial tilt parameter tiltX and tiltY. In the ",(0,i.jsx)(a.code,{children:"thin"})," approximation, the structure is set to 1m, but wake strength is scaled by a factor of 5. In the ",(0,i.jsx)(a.code,{children:"thick"})," version, the structure length is set to 5m and scale factor is 1."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:'def track_with_tilt_thin(p_array_init, model, b, a=0.01, tiltX=0, tiltY=0):\n    totalL = 1 # 1m device\n    if model==\'02\':\n        wk_tv_kick = WakeTableParallelPlate_origin(\n        b=b,  # distance from the plate in [m]\n        a=a,  # half gap between plates in [m]\n        t=0.25 * 1e-3,  # longitudinal gap in [m]\n        p=0.5 * 1e-3,  # period of corrugation in [m]\n        length=totalL,  # length of the corrugated structure in [m]\n        sigma=12e-6,  # characteristic (rms) longitudinal beam size in [m]\n        orient="horz"  # "horz" or "vert" plate orientation\n        )\n        wake = Wake()\n    elif model == \'03\':\n        wk_tv_kick = WakeTableParallelPlate3_origin(\n        b=b,  # distance from the plate in [m]\n        a=a,  # half gap between plates in [m]\n        t=0.25 * 1e-3,  # longitudinal gap in [m]\n        p=0.5 * 1e-3,  # period of corrugation in [m]\n        length=totalL,  # length of the corrugated structure in [m]\n        sigma=12e-6,  # characteristic (rms) longitudinal beam size in [m]\n        orient="horz"  # "horz" or "vert" plate orientation\n        )\n        wake = Wake3()\n    elif model == \'12\':\n        wk_tv_kick = WakeTableParallelPlate(\n        b=b,  # distance from the plate in [m]\n        a=a,  # half gap between plates in [m]\n        t=0.25 * 1e-3,  # longitudinal gap in [m]\n        p=0.5 * 1e-3,  # period of corrugation in [m]\n        length=totalL,  # length of the corrugated structure in [m]\n        sigma=12e-6,  # characteristic (rms) longitudinal beam size in [m]\n        orient="horz"  # "horz" or "vert" plate orientation\n        )\n        wake = Wake()\n    elif model == \'13\':\n        wk_tv_kick = WakeTableParallelPlate3(\n        b=b,  # distance from the plate in [m]\n        a=a,  # half gap between plates in [m]\n        t=0.25 * 1e-3,  # longitudinal gap in [m]\n        p=0.5 * 1e-3,  # period of corrugation in [m]\n        length=totalL,  # length of the corrugated structure in [m]\n        sigma=12e-6,  # characteristic (rms) longitudinal beam size in [m]\n        orient="horz"  # "horz" or "vert" plate orientation\n        )\n        wake = Wake3()\n    elif model == \'N12\':    # same as \'12\', but use numerical implementation for coefficients\n        wk_tv_kick = WakeTableDechirperOffAxis(\n        b=b,  # distance from the plate in [m]\n        a=a,  # half gap between plates in [m]\n        t=0.25 * 1e-3,  # longitudinal gap in [m]\n        p=0.5 * 1e-3,  # period of corrugation in [m]\n        length=totalL,  # length of the corrugated structure in [m]\n        sigma=12e-6,  # characteristic (rms) longitudinal beam size in [m]\n        orient="horz"  # "horz" or "vert" plate orientation\n        )\n        wake = Wake()\n    else:\n        raise ValueError(\'Wakefield model not found.\')\n    \n    # creation of wake object with parameters\n    # w_sampling - defines the number of the equidistant sampling points for the one-dimensional\n    # wake coefficients in the Taylor expansion of the 3D wake function.\n    wake.w_sampling = 500\n    wake.wake_table = wk_tv_kick\n    wake.step = 1  # step in Navigator.unit_step, dz = Navigator.unit_step * wake.step [m]\n    wake.factor = 5  # scale by 5 (to represent 5m)\n\n    m1 = Marker()\n    m2 = Marker()\n    lattice = (m1, Drift(l=1), m2, Drift(l=19))  # note the drift distance should be the same as the structure\n\n    lat = MagneticLattice(lattice, method={"global": SecondTM})\n    navi = Navigator(lat)\n    \n    # add physics proccesses\n    navi.add_physics_proc(wake, m1, m2)\n\n    p_array = deepcopy(p_array_init)\n    # add tilt to the beam\n    p_array.rparticles[0, :] = p_array.x() + p_array.rparticles[4, :] * tiltX\n    p_array.rparticles[2, :] = p_array.y() + p_array.rparticles[4, :] * tiltY\n    \n    p_array_before = deepcopy(p_array)\n    \n    print("tracking with Wakes .... ")\n    tws_track, p_array = track(lat, p_array, navi)\n    \n    return p_array_before, p_array\n\n'})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:'def track_with_tilt_thick(p_array_init, model, b, a=0.01, tiltX=0, tiltY=0):\n    totalL = 5   # 5m device\n    if model==\'02\':\n        wk_tv_kick = WakeTableParallelPlate_origin(\n        b=b,  # distance from the plate in [m]\n        a=a,  # half gap between plates in [m]\n        t=0.25 * 1e-3,  # longitudinal gap in [m]\n        p=0.5 * 1e-3,  # period of corrugation in [m]\n        length=totalL,  # length of the corrugated structure in [m]\n        sigma=12e-6,  # characteristic (rms) longitudinal beam size in [m]\n        orient="horz"  # "horz" or "vert" plate orientation\n        )\n        wake = Wake()\n    elif model == \'03\':\n        wk_tv_kick = WakeTableParallelPlate3_origin(\n        b=b,  # distance from the plate in [m]\n        a=a,  # half gap between plates in [m]\n        t=0.25 * 1e-3,  # longitudinal gap in [m]\n        p=0.5 * 1e-3,  # period of corrugation in [m]\n        length=totalL,  # length of the corrugated structure in [m]\n        sigma=12e-6,  # characteristic (rms) longitudinal beam size in [m]\n        orient="horz"  # "horz" or "vert" plate orientation\n        )\n        wake = Wake3()\n    elif model == \'12\':\n        wk_tv_kick = WakeTableParallelPlate(\n        b=b,  # distance from the plate in [m]\n        a=a,  # half gap between plates in [m]\n        t=0.25 * 1e-3,  # longitudinal gap in [m]\n        p=0.5 * 1e-3,  # period of corrugation in [m]\n        length=totalL,  # length of the corrugated structure in [m]\n        sigma=12e-6,  # characteristic (rms) longitudinal beam size in [m]\n        orient="horz"  # "horz" or "vert" plate orientation\n        )\n        wake = Wake()\n    elif model == \'13\':\n        wk_tv_kick = WakeTableParallelPlate3(\n        b=b,  # distance from the plate in [m]\n        a=a,  # half gap between plates in [m]\n        t=0.25 * 1e-3,  # longitudinal gap in [m]\n        p=0.5 * 1e-3,  # period of corrugation in [m]\n        length=totalL,  # length of the corrugated structure in [m]\n        sigma=12e-6,  # characteristic (rms) longitudinal beam size in [m]\n        orient="horz"  # "horz" or "vert" plate orientation\n        )\n        wake = Wake3()\n    elif model == \'N12\':    # same as \'12\', but use numerical implementation for coefficients\n        wk_tv_kick = WakeTableDechirperOffAxis(\n        b=b,  # distance from the plate in [m]\n        a=a,  # half gap between plates in [m]\n        t=0.25 * 1e-3,  # longitudinal gap in [m]\n        p=0.5 * 1e-3,  # period of corrugation in [m]\n        length=totalL,  # length of the corrugated structure in [m]\n        sigma=12e-6,  # characteristic (rms) longitudinal beam size in [m]\n        orient="horz"  # "horz" or "vert" plate orientation\n        )\n        wake = Wake()\n    else:\n        raise ValueError(\'Wakefield model not found.\')\n    \n    # creation of wake object with parameters\n    # w_sampling - defines the number of the equidistant sampling points for the one-dimensional\n    # wake coefficients in the Taylor expansion of the 3D wake function.\n    wake.w_sampling = 500\n    wake.wake_table = wk_tv_kick\n    wake.step = 1  # step in Navigator.unit_step, dz = Navigator.unit_step * wake.step [m]\n    wake.factor = 1\n\n    m1 = Marker()\n    m2 = Marker()\n\n    lattice = (m1, Drift(l=5), m2, Drift(l=15))\n\n    lat = MagneticLattice(lattice, method={"global": SecondTM})\n    navi = Navigator(lat)\n    \n    # add physics proccesses\n    navi.add_physics_proc(wake, m1, m2)\n\n    p_array = deepcopy(p_array_init)\n    # add tilt to the beam\n    p_array.rparticles[0, :] = p_array.x() + p_array.rparticles[4, :] * tiltX\n    p_array.rparticles[2, :] = p_array.y() + p_array.rparticles[4, :] * tiltY\n    \n    p_array_before = deepcopy(p_array)\n    \n    print("tracking with Wakes .... ")\n    tws_track, p_array = track(lat, p_array, navi)\n    \n    return p_array_before, p_array\n\n'})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"def plot_slices(p_array, Npart=5000, figsize=(18,10), ax=None, xlim=None, label=None):\n    \"\"\"\n    plot slice parameters of p_array\n    \"\"\"\n    \n    slice_params = global_slice_analysis(p_array, Npart, smooth_param=0.1, filter_iter=10)\n    slice_params.s = slice_params.s*1e6\n    \n    if ax is None:\n        f, ax = plt.subplots(3, 4, sharex=True, figsize=figsize, layout='constrained')\n        \n    ax[0,0].plot(slice_params.s, slice_params.mx*1e6, label=label)\n    ax[0,0].set_ylabel(r'x ($\\mu$m)')\n    ax[0,0].set_xlim(xlim)\n    if label is not None:\n        ax[0,0].legend()\n    \n    ax[0,1].plot(slice_params.s, slice_params.mxp*1e6)\n    ax[0,1].set_ylabel(r'xp ($\\mu$rad)')\n    \n    ax[0,2].plot(slice_params.s, slice_params.sig_x*1e6)\n    ax[0,2].set_ylabel(r'$\\sigma_x$ ($\\mu$m)')\n    \n    ax[0,3].plot(slice_params.s, slice_params.sig_xp*1e6)\n    ax[0,3].set_ylabel(r'$\\sigma_{xp}$ ($\\mu$rad)')\n        \n    ax[1,0].plot(slice_params.s, slice_params.my*1e6)\n    ax[1,0].set_ylabel(r'y ($\\mu$m)')\n    \n    ax[1,1].plot(slice_params.s, slice_params.myp*1e6)\n    ax[1,1].set_ylabel(r'yp ($\\mu$rad)')\n    \n    ax[1,2].plot(slice_params.s, slice_params.sig_y*1e6)\n    ax[1,2].set_ylabel(r'$\\sigma_y$ ($\\mu$m)')  \n    ax[1,2].set_xlabel(r's ($\\mu$m)')\n    \n    ax[1,3].plot(slice_params.s, slice_params.sig_yp*1e6)\n    ax[1,3].set_xlabel(r's ($\\mu$m)')\n    ax[1,3].set_ylabel(r'$\\sigma_{yp}$ ($\\mu$rad)')\n    \n    ax[2,0].plot(slice_params.s, slice_params.mp*100)\n    ax[2,0].set_xlabel(r's ($\\mu$m)')\n    ax[2,0].set_ylabel('p (%)')\n    \n    ax[2,1].plot(slice_params.s, slice_params.se/1e6)\n    ax[2,1].set_xlabel(r's ($\\mu$m)')\n    ax[2,1].set_ylabel(r'$\\sigma_{E}$ (MeV)')\n    \n    ax[2,2].set_axis_off()\n    ax[2,3].set_axis_off()\n\n"})}),"\n",(0,i.jsx)(a.h2,{id:"create-particle-array",children:"Create particle array"}),"\n",(0,i.jsx)(a.p,{children:"A simple particle array at 14GeV with flattop current profile is generated."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"\n# calculate twiss functions with initial twiss parameters\ntws0 = Twiss()\ntws0.E = 14  # in GeV\ntws0.beta_x = 30\ntws0.beta_y = 30\ntws0.alpha_x = 0\ntws0.alpha_y = 0\n\n# calculate beam properties\nemit = 0.5e-6\nsigma_x = np.sqrt(tws0.beta_x * emit /(tws0.E*1e3/0.511))\nsigma_xp = emit / (tws0.E*1e3/0.511)/sigma_x\n\nl = 15e-6\nsigma_t = l/3e8/(2*np.sqrt(3))\nsigma_s = sigma_t *3e8\nsigma_delta = 1.5e-4\nprint(sigma_x, sigma_xp)\nprint(sigma_s, sigma_t)\nprint(sigma_delta * tws0.E*1e3)\n"})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"    2.3398717913595178e-05 7.79957263786506e-07\n    4.330127018922194e-06 1.4433756729740646e-14\n    2.1\n"})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"np.random.seed(10)\np_array_init = generate_parray(sigma_x=sigma_x, sigma_px=sigma_xp, sigma_y=sigma_x, sigma_py=sigma_xp, \n                         sigma_tau=7.5e-6, sigma_p=sigma_delta, chirp=0., charge=0.25e-09, \n                         nparticles=200000, energy=tws0.E, tau_trunc=None, shape='Flat')\n\nshow_e_beam(p_array_init, nparts_in_slice=4000, figsize=(12, 9))\nplt.show()\n\nplot_slices(p_array_init)\n\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"png",src:t(6281).A+"",width:"769",height:"579"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"png",src:t(2080).A+"",width:"1304",height:"728"})}),"\n",(0,i.jsx)(a.h2,{id:"corrugated-structure-as-dechirper",children:"Corrugated structure as dechirper"}),"\n",(0,i.jsx)(a.p,{children:"Here we use the numerical implementation of dechirper wakefield table. We set structure half gap to 0.5 mm and beam on axis (distance to plate 0.5mm). Here we only see the effect of longitudinal wake and transverse quadrupole wake."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"_, p1 = track_with_tilt_thin(p_array_init, 'N12', b=0.5e-3, a=0.5e-3)\n\n_, p2 = track_with_tilt_thin(p_array_init, 'N12', b=5e-3, a=5e-3)\n\nf, ax = plt.subplots(3, 4, sharex=True, figsize=(18,10), layout='constrained')\nplot_slices(p1, ax=ax, label='w/ dechirper')\nplot_slices(p2, ax=ax, label='w/o dechirper')\n\nplt.show()\n"})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"    tracking with Wakes .... \n    z = 20.0 / 20.0. Applied: aketracking with Wakes .... \n    z = 20.0 / 20.0. Applied: ake\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"png",src:t(3188).A+"",width:"1304",height:"728"})}),"\n",(0,i.jsx)(a.h3,{id:"thick-lens",children:"Thick lens"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"_, p1 = track_with_tilt_thin(p_array_init, 'N12', b=0.5e-3, a=0.5e-3)\n\n_, p2 = track_with_tilt_thick(p_array_init, 'N12', b=0.5e-3, a=0.5e-3)\n\nf, ax = plt.subplots(3, 4, sharex=True, figsize=(18,10), layout='constrained')\nplot_slices(p1, ax=ax, label='thin lens')\nplot_slices(p2, ax=ax, label='thick lens')\n\nplt.show()\n"})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"    tracking with Wakes .... \n    z = 20.0 / 20.0. Applied: aketracking with Wakes .... \n    z = 20.0 / 20.0. Applied: ake\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"png",src:t(5340).A+"",width:"1304",height:"728"})}),"\n",(0,i.jsx)(a.h2,{id:"corrugated-structure-as-a-streaker",children:"Corrugated structure as a streaker"}),"\n",(0,i.jsx)(a.p,{children:"Here we use the numerical implementation of dechirper wakefield table. We set structure half gap to 10 mm and beam distance to plate 0.5mm. We can observe dechirping, streaking and focusing effect."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"_, p1 = track_with_tilt_thin(p_array_init, 'N12', b=0.5e-3, a=10e-3)\n\n_, p2 = track_with_tilt_thin(p_array_init, 'N12', b=5e-3, a=10e-3)\n\n\nf, ax = plt.subplots(3, 4, sharex=True, figsize=(18,10), layout='constrained')\nplot_slices(p1, ax=ax, label='w/ streaker')\nplot_slices(p2, ax=ax, label='w/o streaker')\n\n\nplt.show()\n"})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"    tracking with Wakes .... \n    z = 20.0 / 20.0. Applied: aketracking with Wakes .... \n    z = 20.0 / 20.0. Applied: ake\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"png",src:t(1814).A+"",width:"1304",height:"728"})}),"\n",(0,i.jsx)(a.h3,{id:"thick-lens-1",children:"Thick lens"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"_, p1 = track_with_tilt_thin(p_array_init, 'N12', b=0.5e-3, a=10e-3)\n\n_, p2 = track_with_tilt_thick(p_array_init, 'N12', b=0.5e-3, a=10e-3)\n\nf, ax = plt.subplots(3, 4, sharex=True, figsize=(18,10), layout='constrained')\nplot_slices(p1, ax=ax, label='thin lens')\nplot_slices(p2, ax=ax, label='thick lens')\n\nplt.show()\n"})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"    tracking with Wakes .... \n    z = 20.0 / 20.0. Applied: aketracking with Wakes .... \n    z = 20.0 / 20.0. Applied: ake\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"png",src:t(2343).A+"",width:"1304",height:"728"})}),"\n",(0,i.jsx)(a.h2,{id:"compare-analytical-model-with-numerical-waketable",children:"Compare analytical model with numerical waketable"}),"\n",(0,i.jsx)(a.p,{children:"Here we compare out analytical implementation of the waketable with the numerical implementation."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"_, p1 = track_with_tilt_thin(p_array_init, 'N12', b=0.5e-3, a=10e-3)\n\n_, p2 = track_with_tilt_thin(p_array_init, '12', b=0.5e-3, a=10e-3)\n\nf, ax = plt.subplots(3, 4, sharex=True, figsize=(18,10), layout='constrained')\nplot_slices(p1, ax=ax, label='Numer. waketable')\nplot_slices(p2, ax=ax, label='Analy. waketable')\n\nplt.show()\n"})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"    tracking with Wakes .... \n    z = 20.0 / 20.0. Applied: tracking with Wakes .... \n    z = 20.0 / 20.0. Applied: ake\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"png",src:t(8841).A+"",width:"1304",height:"728"})}),"\n",(0,i.jsx)(a.h2,{id:"compare-2nd-order-taylor-expansion-with-3rd-order",children:"Compare 2nd order Taylor expansion with 3rd order"}),"\n",(0,i.jsx)(a.p,{children:"It is necessary to check third order effect while the beam extension is rather large, here we assume a beam tilt in y, extending about 300um, and observe the third order effect mainly on the time-dependent focusing term, effect on the streaking and energy loss (spread) is small."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"p0, p1 = track_with_tilt_thin(p_array_init, '12', b=0.5e-3, a=10e-3, tiltY=20)\n\n_, p2 = track_with_tilt_thin(p_array_init, '13', b=0.5e-3, a=10e-3, tiltY=20)\n\nf, ax = plt.subplots(3, 4, sharex=True, figsize=(18,10), layout='constrained')\nplot_slices(p0, ax=ax)\n\nf, ax = plt.subplots(3, 4, sharex=True, figsize=(18,10), layout='constrained')\nplot_slices(p1, ax=ax, label='2nd order')\nplot_slices(p2, ax=ax, label='3rd order')\n\nplt.show()\n"})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"    tracking with Wakes .... \n    z = 20.0 / 20.0. Applied: tracking with Wakes .... \n    z = 20.0 / 20.0. Applied: ake3\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"png",src:t(2387).A+"",width:"1304",height:"728"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.img,{alt:"png",src:t(6632).A+"",width:"1304",height:"728"})})]})}function d(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},6281:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/10_CorrugatedStructures_12_0-d03f81d99a27bd099c8e8650191741c2.png"},2080:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/10_CorrugatedStructures_12_1-8c3286abe9e8a811cca2b70ad9a647ba.png"},3188:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/10_CorrugatedStructures_14_1-46905d8c75e378a0555148beaa0a0894.png"},5340:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/10_CorrugatedStructures_16_1-2a59886db56afb88152da2dee886ec89.png"},1814:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/10_CorrugatedStructures_18_1-51cbf1a63711004d8bdb8fb3d35309c6.png"},2343:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/10_CorrugatedStructures_20_1-ce80fb5dc9af3573bdf5d973e5a0569f.png"},8841:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/10_CorrugatedStructures_22_1-6e8487446eb36a4076d9e5963fea4fe7.png"},2387:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/10_CorrugatedStructures_24_1-c78e196395c3ff5523673798b14388c9.png"},6632:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/10_CorrugatedStructures_24_2-e4c9025f16a3ef4dfa037c464ba60d6b.png"},8453:(e,a,t)=>{t.d(a,{R:()=>l,x:()=>s});var n=t(6540);const i={},r=n.createContext(i);function l(e){const a=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:a},e.children)}}}]);