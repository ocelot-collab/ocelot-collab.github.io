"use strict";(self.webpackChunkocelot_website=self.webpackChunkocelot_website||[]).push([[1143],{4608:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"docu/functions/generate_parray","title":"generate_parray","description":"Function to generate a particle beam distribution as a ParticleArray object.","source":"@site/docs/docu/functions/generate_parray.md","sourceDirName":"docu/functions","slug":"/docu/functions/generate_parray","permalink":"/docs/docu/functions/generate_parray","draft":false,"unlisted":false,"editUrl":"https://github.com/ocelot-collab/ocelot-collab.github.io/tree/main/docs/docu/functions/generate_parray.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"generate_parray","description":"Function to generate a particle beam distribution as a ParticleArray object."},"sidebar":"docsSidebar","previous":{"title":"get_envelope","permalink":"/docs/docu/functions/get_envelope"},"next":{"title":"How To","permalink":"/docs/category/how-to"}}');var r=s(4848),t=s(8453);const a={sidebar_position:2,title:"generate_parray",description:"Function to generate a particle beam distribution as a ParticleArray object."},d="generate_parray",c={},l=[{value:"Synopsis",id:"synopsis",level:3},{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"1. Using default values",id:"1-using-default-values",level:3},{value:"2. Generate ParticleArray from Twiss parameters",id:"2-generate-particlearray-from-twiss-parameters",level:3},{value:"3. Generate particle distribution with an arbitrary longitudinal shape",id:"3-generate-particle-distribution-with-an-arbitrary-longitudinal-shape",level:3},{value:"Notes",id:"notes",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("small",{children:(0,r.jsxs)(n.p,{children:["This notebook was created by Sergey Tomin (",(0,r.jsx)(n.a,{href:"mailto:sergey.tomin@desy.de",children:"sergey.tomin@desy.de"}),"). June 2025."]})}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"generate_parray",children:(0,r.jsx)(n.a,{href:"https://github.com/ocelot-collab/ocelot/blob/master/ocelot/cpbd/beam.py#L2210",children:(0,r.jsx)(n.code,{children:"generate_parray"})})})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"generate_parray"})," function is a versatile tool for creating a ",(0,r.jsx)(n.a,{href:"/docs/docu/OCELOT%20fundamentals/particle-array",children:(0,r.jsx)(n.code,{children:"ParticleArray"})})," object, which represents a collection of particles. This is essential for initializing beam distributions for simulations, analysis, or theoretical studies within OCELOT.\nIt allows for specification of various particle distribution parameters, defaulting to a 6D Gaussian distribution, but also supporting other standard shapes and user-defined custom longitudinal profiles."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"synopsis",children:"Synopsis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'ocelot.cpbd.beam.generate_parray(\n    sigma_x   = 1e-4,\n    sigma_px  = 2e-5,\n    sigma_y   = None,\n    sigma_py  = None,\n    sigma_tau = 1e-3,\n    sigma_p   = 1e-4,\n    chirp     = 0.01,\n    charge    = 5e-9,\n    nparticles= 200_000,\n    energy    = 0.13,\n    tau_trunc = None,\n    tws       = None,\n    shape     = "gauss"\n) -> ParticleArray\n'})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sigma_x"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"1e-4"})}),(0,r.jsxs)(n.td,{children:["RMS beam size in the horizontal coordinate ",(0,r.jsx)(n.code,{children:"x"})," (m)."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sigma_px"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"2e-5"})}),(0,r.jsxs)(n.td,{children:["RMS beam divergence in horizontal canonical momentum ",(0,r.jsx)(n.code,{children:"px/p0"})," (unitless)."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sigma_y"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float"})," or ",(0,r.jsx)(n.code,{children:"None"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"None"})}),(0,r.jsxs)(n.td,{children:["RMS beam size in the vertical coordinate ",(0,r.jsx)(n.code,{children:"y"})," (m). Defaults to ",(0,r.jsx)(n.code,{children:"sigma_x"})," if ",(0,r.jsx)(n.code,{children:"None"})," (and ",(0,r.jsx)(n.code,{children:"tws"})," is not provided)."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sigma_py"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float"})," or ",(0,r.jsx)(n.code,{children:"None"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"None"})}),(0,r.jsxs)(n.td,{children:["RMS beam divergence in vertical canonical momentum ",(0,r.jsx)(n.code,{children:"py/p0"})," (unitless). Defaults to ",(0,r.jsx)(n.code,{children:"sigma_px"})," if ",(0,r.jsx)(n.code,{children:"None"})," (and ",(0,r.jsx)(n.code,{children:"tws"})," is not provided)."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sigma_tau"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"1e-3"})}),(0,r.jsxs)(n.td,{children:["RMS bunch length in the longitudinal coordinate ",(0,r.jsx)(n.code,{children:"tau = c*t"})," (m). Note: ",(0,r.jsx)(n.code,{children:"tau > 0"})," is the head of the bunch. Used to scale predefined shapes (",(0,r.jsx)(n.code,{children:'"gauss"'}),", ",(0,r.jsx)(n.code,{children:'"tri"'}),", ",(0,r.jsx)(n.code,{children:'"rect"'}),") and for chirp calculation."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sigma_p"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"1e-4"})}),(0,r.jsxs)(n.td,{children:["RMS relative energy deviation ",(0,r.jsx)(n.code,{children:"(E - E0) / p0c"}),". Can be overridden if ",(0,r.jsx)(n.code,{children:"tws"})," is provided and ",(0,r.jsx)(n.code,{children:"tws.pp"})," is non-zero (see ",(0,r.jsx)(n.code,{children:"tws"})," parameter)."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"chirp"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"0.01"})}),(0,r.jsxs)(n.td,{children:["Linear energy chirp (unitless). Applies a correlation: ",(0,r.jsx)(n.code,{children:"p_i_final = p_i_initial + chirp * tau_i / sigma_tau"}),". Applied only if ",(0,r.jsx)(n.code,{children:"sigma_tau"})," is not zero."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"charge"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"5e-9"})}),(0,r.jsx)(n.td,{children:"Total beam charge (Coulombs)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"nparticles"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"int"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"200000"})}),(0,r.jsx)(n.td,{children:"Number of macro-particles in the distribution."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"energy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"0.13"})}),(0,r.jsxs)(n.td,{children:["Reference beam energy (GeV), i.e., ",(0,r.jsx)(n.code,{children:"E0"}),". Can be overridden if ",(0,r.jsx)(n.code,{children:"tws"})," is provided and ",(0,r.jsx)(n.code,{children:"tws.E"})," is non-zero."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tau_trunc"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"float"})," or ",(0,r.jsx)(n.code,{children:"None"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"None"})}),(0,r.jsxs)(n.td,{children:["Truncation factor for the longitudinal Gaussian distribution (",(0,r.jsx)(n.code,{children:'shape="gauss"'}),"). If ",(0,r.jsx)(n.code,{children:"None"}),", defaults to ",(0,r.jsx)(n.code,{children:"5"}),". The distribution is generated in ",(0,r.jsx)(n.code,{children:"[-tau_trunc * sigma_tau, tau_trunc * sigma_tau]"}),". For other shapes, truncation is defined by the shape's s-coordinate range."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tws"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Twiss"})," or ",(0,r.jsx)(n.code,{children:"None"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"None"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"/docs/docu/OCELOT%20fundamentals/twiss",children:"Twiss"})," parameters object. If a ",(0,r.jsx)(n.code,{children:"Twiss"})," object is provided ",(0,r.jsx)(n.strong,{children:"and"})," its ",(0,r.jsx)(n.code,{children:"emit_x, emit_y, beta_x, beta_y, gamma_x, gamma_y"})," attributes are all non-zero, it defines the transverse beam properties. This overrides ",(0,r.jsx)(n.code,{children:"sigma_x, sigma_px, sigma_y, sigma_py"}),". The transverse distribution is then generated using ",(0,r.jsx)(n.code,{children:"np.random.multivariate_normal"})," and further refined by ",(0,r.jsx)(n.code,{children:"beam_matching"})," to precisely match the Twiss parameters. Additionally: ",(0,r.jsx)("br",{})," - If ",(0,r.jsx)(n.code,{children:"tws.E"})," is non-zero, it overrides the ",(0,r.jsx)(n.code,{children:"energy"})," parameter. ",(0,r.jsx)("br",{})," - If ",(0,r.jsx)(n.code,{children:"tws.pp"})," is non-zero, ",(0,r.jsx)(n.code,{children:"sigma_p"})," is set to ",(0,r.jsx)(n.code,{children:"sqrt(tws.pp)"}),". (",(0,r.jsx)(n.code,{children:"pp"})," is assumed to be ",(0,r.jsx)(n.code,{children:"sigma_p^2"}),")."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"shape"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"str"})," or ",(0,r.jsx)(n.code,{children:"[s, f(s)]"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"gauss"'})}),(0,r.jsxs)(n.td,{children:["Longitudinal current profile shape. Particles are sampled using an inverted CDF method based on this profile. ",(0,r.jsx)("br",{})," - Supported strings: ",(0,r.jsx)(n.code,{children:'"gauss"'}),", ",(0,r.jsx)(n.code,{children:'"tri"'})," (triangular), ",(0,r.jsx)(n.code,{children:'"rect"'})," (rectangular/flat-top). These use ",(0,r.jsx)(n.code,{children:"sigma_tau"})," to define their extent. ",(0,r.jsx)("br",{})," - Custom profile: ",(0,r.jsx)(n.code,{children:"[s, f(s)]"})," where ",(0,r.jsx)(n.code,{children:"s"})," is an array of longitudinal positions (m) and ",(0,r.jsx)(n.code,{children:"f(s)"})," is the corresponding current/density."]})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/docu/OCELOT%20fundamentals/particle-array",children:(0,r.jsx)(n.code,{children:"ParticleArray"})}),": An OCELOT ",(0,r.jsx)(n.code,{children:"ParticleArray"})," object representing the generated particle distribution."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,r.jsx)(n.h3,{id:"1-using-default-values",children:"1. Using default values"}),"\n",(0,r.jsx)(n.p,{children:"This example generates a particle array with default parameters, resulting in a 6D Gaussian distribution."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import sys\nsys.path.append("/Users/tomins/Nextcloud/DESY/repository/ocelot")\nfrom ocelot.cpbd.beam import generate_parray\nparray = generate_parray()\nprint(parray)\n'})}),"\n",(0,r.jsx)(n.p,{children:"initializing ocelot...\nParticleArray:\nRef. energy : 0.13 GeV\nAve. energy : 0.13 GeV\nstd(x)      : 0.1 mm\nstd(px)     : 0.02 mrad\nstd(y)      : 0.1 mm\nstd(py)     : 0.02 mrad\nstd(p)      : 0.01\nstd(tau)    : 0.999 mm\nCharge      : 5.0 nC\ns pos       : 0.0 m\nn particles : 200000"}),"\n",(0,r.jsx)(n.p,{children:"Twiss parameters of the generated distribution can be calculated:"}),"\n",(0,r.jsx)(n.p,{children:"Note: Expected output (actual values may vary slightly due to random sampling):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"print(parray.get_twiss())\n"})}),"\n",(0,r.jsx)(n.p,{children:"emit_x  = 2.0047197807088e-09\nemit_y  = 2.0048157030825804e-09\nemit_xn  = 5.100041797972257e-07\nemit_yn  = 5.100285826150334e-07\nbeta_x  = 4.994335333853261\nbeta_y  = 4.986264209140136\nalpha_x = -0.002012054559353829\nalpha_y = 0.0028608621340389124\nDx      = 0.0\nDy      = 0.0\nDxp     = 0.0\nDyp     = 0.0\nmux     = 0.0\nmuy     = 0.0\nnu_x    = 0.0\nnu_y    = 0.0\nE       = 0.13\ns        = 0.0"}),"\n",(0,r.jsx)(n.h3,{id:"2-generate-particlearray-from-twiss-parameters",children:"2. Generate ParticleArray from Twiss parameters"}),"\n",(0,r.jsxs)(n.p,{children:["To generate a distribution that matches specific lattice ",(0,r.jsx)(n.a,{href:"/docs/docu/OCELOT%20fundamentals/twiss",children:"Twiss"})," parameters, use the ",(0,r.jsx)(n.code,{children:"tws"})," argument."]}),"\n",(0,r.jsxs)(n.p,{children:["It is generally recommended to provide a ",(0,r.jsx)(n.a,{href:"/docs/docu/OCELOT%20fundamentals/twiss",children:(0,r.jsx)(n.code,{children:"Twiss"})})," object with defined emittances \u2014 either geometric (",(0,r.jsx)(n.code,{children:"emit_x"}),", ",(0,r.jsx)(n.code,{children:"emit_y"}),") or normalized (",(0,r.jsx)(n.code,{children:"emit_xn"}),", ",(0,r.jsx)(n.code,{children:"emit_yn"}),").\nIf using normalized emittances, make sure the beam ",(0,r.jsx)(n.code,{children:"energy"})," (",(0,r.jsx)(n.code,{children:"E"}),") is correctly specified in the ",(0,r.jsx)(n.a,{href:"/docs/docu/OCELOT%20fundamentals/twiss",children:"Twiss"})," object, as it is essential for converting to geometric emittance internally."]}),"\n",(0,r.jsxs)(n.p,{children:["When all relevant Twiss attributes (",(0,r.jsx)(n.code,{children:"emit_x"}),", ",(0,r.jsx)(n.code,{children:"emit_y"}),", ",(0,r.jsx)(n.code,{children:"beta_x"}),", ",(0,r.jsx)(n.code,{children:"beta_y"}),", ",(0,r.jsx)(n.code,{children:"gamma_x"}),", ",(0,r.jsx)(n.code,{children:"gamma_y"}),") are non-zero, they take precedence in determining the transverse beam properties."]}),"\n",(0,r.jsxs)(n.p,{children:["Additionally, the beam ",(0,r.jsx)(n.code,{children:"energy"})," and ",(0,r.jsx)(n.code,{children:"sigma_p"})," can be overridden via ",(0,r.jsx)(n.code,{children:"tws.E"})," and ",(0,r.jsx)(n.code,{children:"tws.pp"}),", respectively."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ocelot.cpbd.beam import Twiss, generate_parray\n\n# Define Twiss parameters\ntws0 = Twiss(emit_xn=0.3e-6, emit_yn=0.7e-6, beta_x=10, alpha_x=-1, beta_y=7, alpha_y=1.3, E=0.5)\n# If you want tws to define sigma_p, set tws0.pp, e.g., tws0.pp = (5e-4)**2\n\nparray_from_tws = generate_parray(\n    tws=tws0,\n    charge=250e-12,\n    nparticles=100_000,\n    sigma_tau=5e-3,  # Longitudinal sigma_tau\n    sigma_p=5e-4,    # Default sigma_p, overridden if tws0.pp is set\n    shape="gauss",    # Longitudinal shape\n    energy=1         # despite energy is define also here, it will be overrides by energy in Twiss object\n)\n\nprint(f"Reference energy used: {parray_from_tws.E} GeV")\nprint(parray_from_tws.get_twiss())\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"    # [INFO] Twiss parameters have priority. sigma_{x, px, y, py} will be redefine\n\n    Reference energy used: 0.5 GeV\n    emit_x  = 3.0689589336837374e-10\n    emit_y  = 7.15089446028782e-10\n    emit_xn  = 3.002900327281652e-07\n    emit_yn  = 6.996973168806738e-07\n    beta_x  = 10.000184452346401\n    beta_y  = 6.999384746018024\n    alpha_x = -0.9998838045047547\n    alpha_y = 1.299829019310836\n    Dx      = 0.0\n    Dy      = 0.0\n    Dxp     = 0.0\n    Dyp     = 0.0\n    mux     = 0.0\n    muy     = 0.0\n    nu_x    = 0.0\n    nu_y    = 0.0\n    E       = 0.5\n    s        = 0.0\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-generate-particle-distribution-with-an-arbitrary-longitudinal-shape",children:"3. Generate particle distribution with an arbitrary longitudinal shape"}),"\n",(0,r.jsxs)(n.p,{children:["The longitudinal current profile can be a standard shape or a custom one defined by ",(0,r.jsx)(n.code,{children:"[tau, f(tau)]"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import numpy as np\nfrom ocelot.cpbd.beam import generate_parray\nfrom ocelot.gui.accelerator import show_e_beam\nimport matplotlib.pyplot as plt\n\n# Define an effective overall length for the custom shape\nsigma_tau_ref = 10e-6\n\n# Parameters for a custom shape (e.g., sum of Gaussians)\nA1, A2, A3 = 0.5, 0.2, 1.0\nmu1, mu2, mu3 = -0.77 * sigma_tau_ref, 3.7 * sigma_tau_ref, -0.63 * sigma_tau_ref\nsigma1, sigma2, sigma3 = 0.72 * sigma_tau_ref, 0.92 * sigma_tau_ref, 0.3 * sigma_tau_ref\n\nf_custom = lambda x_val: (A1 * np.exp(-(x_val - mu1)**2 / (2 * sigma1**2)) +\n                          A2 * np.exp(-(x_val - mu2)**2 / (2 * sigma2**2)) +\n                          A3 * np.exp(-(x_val - mu3)**2 / (2 * sigma3**2)))\n\ntau_coords = np.linspace(-5 * sigma_tau_ref, 5 * sigma_tau_ref, num=300)\ncustom_profile = [tau_coords, f_custom(tau_coords)]\n\nparray_custom = generate_parray(\n    sigma_x=1e-4, sigma_px=2e-5,\n    sigma_tau=sigma_tau_ref, # Used for chirp calc and as a general scale\n    sigma_p=1e-4,\n    chirp=0.01,\n    charge=250e-12,\n    nparticles=500_000,\n    energy=0.13,\n    shape=custom_profile\n)\n\nshow_e_beam(parray_custom)\nplt.show()\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"png",src:s(4889).A+"",width:"583",height:"455"})}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Coordinate System & Definitions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["can be found in ",(0,r.jsx)(n.a,{href:"/docs/docu/OCELOT%20fundamentals/coordinate_system",children:"Ocelot Coordinate System"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Twiss Parameter Handling:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If a ",(0,r.jsx)(n.code,{children:"tws"})," object is provided and its core transverse attributes (",(0,r.jsx)(n.code,{children:"emit_x, emit_y, beta_x, beta_y, gamma_x, gamma_y"}),") are all non-zero, it dictates the transverse particle distribution."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"energy"})," parameter for the ",(0,r.jsx)(n.a,{href:"/docs/docu/OCELOT%20fundamentals/particle-array",children:(0,r.jsx)(n.code,{children:"ParticleArray"})})," will be taken from ",(0,r.jsx)(n.code,{children:"tws.E"})," if ",(0,r.jsx)(n.code,{children:"tws.E"})," is non-zero."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"sigma_p"})," for generating energy spread will be ",(0,r.jsx)(n.code,{children:"sqrt(tws.pp)"})," if ",(0,r.jsx)(n.code,{children:"tws.pp"})," is non-zero. (",(0,r.jsx)(n.code,{children:"pp"})," in the ",(0,r.jsx)(n.a,{href:"/docs/docu/OCELOT%20fundamentals/twiss",children:(0,r.jsx)(n.code,{children:"Twiss"})})," object is assumed to represent ",(0,r.jsx)(n.code,{children:"sigma_p_squared"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["After initial generation from Twiss parameters, a ",(0,r.jsx)(n.code,{children:"beam_matching"})," routine is internally called to further refine the particle coordinates, ensuring the resulting distribution's Twiss parameters (alpha, beta, emittance) and phase space orientation closely match the input ",(0,r.jsx)(n.code,{children:"tws"})," object. This includes removing any spurious offsets."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Chirp Application:"})," The ",(0,r.jsx)(n.code,{children:"chirp"})," introduces ",(0,r.jsx)(n.code,{children:"p_final = p_initial + chirp * tau / sigma_tau"}),". ",(0,r.jsx)(n.code,{children:"sigma_tau"})," here is the input parameter, acting as the scaling factor for the chirp, even if ",(0,r.jsx)(n.code,{children:"shape"})," is custom."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Longitudinal Shapes & ",(0,r.jsx)(n.code,{children:"sigma_tau"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For predefined shapes (",(0,r.jsx)(n.code,{children:'"gauss"'}),", ",(0,r.jsx)(n.code,{children:'"tri"'}),", ",(0,r.jsx)(n.code,{children:'"rect"'}),"), the input ",(0,r.jsx)(n.code,{children:"sigma_tau"})," defines their characteristic length and the range over which particles are generated."]}),"\n",(0,r.jsxs)(n.li,{children:["For custom ",(0,r.jsx)(n.code,{children:"shape=[tau, f(tau)]"}),", the ",(0,r.jsx)(n.code,{children:"tau"})," array directly defines the longitudinal extent. The input ",(0,r.jsx)(n.code,{children:"sigma_tau"})," is primarily used for the chirp calculation. The actual RMS bunch length (",(0,r.jsx)(n.code,{children:"std(tau)"}),") will be determined by the custom profile itself."]}),"\n",(0,r.jsxs)(n.li,{children:["Particles are sampled longitudinally according to the specified ",(0,r.jsx)(n.code,{children:"shape"})," using an inverted Cumulative Distribution Function (CDF) method."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},4889:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/generate_parray_7_0-831cb706e17b3735ca64910a2ccb8f56.png"},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var i=s(6540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);