"use strict";(self.webpackChunkocelot_website=self.webpackChunkocelot_website||[]).push([[5844],{8182:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorial/tutorial-photons/pfs_4_synchrotron_radiation_visualization","title":"4. SR Visualization","description":"This notebook was created by Mykola Veremchuk (mykola.veremchuk@xfel.eu), Svitozar Serkez. Source and license info is on GitHub. June 2019.","source":"@site/docs/tutorial/tutorial-photons/pfs_4_synchrotron_radiation_visualization.md","sourceDirName":"tutorial/tutorial-photons","slug":"/tutorial/tutorial-photons/pfs_4_synchrotron_radiation_visualization","permalink":"/docs/tutorial/tutorial-photons/pfs_4_synchrotron_radiation_visualization","draft":false,"unlisted":false,"editUrl":"https://github.com/ocelot-collab/ocelot-collab.github.io/tree/main/docs/tutorial/tutorial-photons/pfs_4_synchrotron_radiation_visualization.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"4. SR Visualization"},"sidebar":"tutorialSidebar","previous":{"title":"3. Reflection from Imperfect Mirror","permalink":"/docs/tutorial/tutorial-photons/pfs_3_imperfect_mirror"},"next":{"title":"5. SASE estimation and imitation","permalink":"/docs/tutorial/tutorial-photons/pfs_5_SASE_Estimator_and_Imitator"}}');var a=i(4848),t=i(8453);const r={sidebar_position:4,title:"4. SR Visualization"},o="4. Converting synchrotron radiation results from Screen object to RadiationField",l={},d=[{value:"Contents",id:"contents",level:3},{value:"Necessary imports",id:"necessary-imports",level:3},{value:"2D synchrotron radiation field",id:"2d-synchrotron-radiation-field",level:2},{value:"Generating 2D Screen",id:"generating-2d-screen",level:3},{value:"Converting 2D Screen to 2D RadiationField",id:"converting-2d-screen-to-2d-radiationfield",level:3},{value:"Plotting RadiationField",id:"plotting-radiationfield",level:3},{value:"Generating and converting 3D Screen",id:"generating-and-converting-3d-screen",level:3}];function c(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",math:"math",mi:"mi",mrow:"mrow",msub:"msub",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("small",{children:(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["This notebook was created by Mykola Veremchuk (",(0,a.jsx)(n.a,{href:"mailto:mykola.veremchuk@xfel.eu",children:"mykola.veremchuk@xfel.eu"}),"), Svitozar Serkez. Source and license info is on ",(0,a.jsx)(n.a,{href:"https://github.com/ocelot-collab/ocelot",children:"GitHub"}),". June 2019."]})})}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"4-converting-synchrotron-radiation-results-from-screen-object-to-radiationfield",children:(0,a.jsxs)(n.a,{href:"https://github.com/ocelot-collab/ocelot/blob/dev/demos/ipython_tutorials/pfs_4_synchrotron_radiation_visualization.ipynb",children:["4. Converting synchrotron radiation results from ",(0,a.jsx)(n.code,{children:"Screen"})," object to ",(0,a.jsx)(n.code,{children:"RadiationField"})]})})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"ocelot.optics.wave.RadiationField"})," objects can be used for analysis as well as propagation of Synchrotron radiation module output"]}),"\n",(0,a.jsx)(n.h3,{id:"contents",children:"Contents"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#2d",children:"2D synchrotron radiation field"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#gen_screen_2d",children:"Generating 2D Screen"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#gen_dfl_2d",children:"Converting 2D Screen to 2D RadiationField"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#plot_dfl_2d",children:"Plotting RadiationField"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"#3d",children:"3D synchrotron radiation field"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#gen_screen_3d",children:"Generating 3D Screen"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#gen_dfl_3d",children:"Converting 3D Screen to 3D RadiationField"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#plot_dfl_3d",children:"Plotting RadiationField"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"necessary-imports",children:"Necessary imports"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import numpy as np\nimport logging\nfrom ocelot import *\nfrom ocelot.rad import *\nfrom ocelot.optics.wave import dfl_waistscan, screen2dfl, RadiationField, WignerDistribution, dfl2wig\nfrom ocelot.gui.dfl_plot import plot_dfl, plot_dfl_waistscan, plot_wigner\nfrom ocelot import ocelog\n\nocelog.setLevel(logging.ERROR) #suppress logger output\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"    initializing ocelot...\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Activate interactive matplolib in notebook\nimport matplotlib\n%matplotlib inline\n# Setup figure white background \nmatplotlib.rcParams[\"figure.facecolor\"] = (1,1,1,1)\n# Setup figure size\nmatplotlib.rcParams['figure.figsize'] = [10, 10]\n"})}),"\n",(0,a.jsx)("a",{id:"2d"}),"\n",(0,a.jsx)(n.h2,{id:"2d-synchrotron-radiation-field",children:"2D synchrotron radiation field"}),"\n",(0,a.jsx)("a",{id:"gen_screen_2d"}),"\n",(0,a.jsx)(n.h3,{id:"generating-2d-screen",children:"Generating 2D Screen"}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"/docs/tutorial/tutorial-photons/pfs_1_synchrotron_radiation",children:"PFS tutorial N1. Synchrotron radiation module"})," tutorial first,\nreproducing the 2d visualization"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# generating 2D synchrotron radiation (it will take about 1-3 minutes)\nund = Undulator(Kx=0.43, nperiods=500, lperiod=0.007, eid="und")\nlat = MagneticLattice(und)\n\nbeam = Beam()\nbeam.E = 2.5  # beam energy in [GeV]\nbeam.I = 0.1  # beam current in [A]\n\n\nscreen_2d = Screen()\nscreen_2d.z = 100.0        # distance from the begining of lattice to the screen \nscreen_2d.size_x = 0.002   # half of screen size in [m] in horizontal plane\nscreen_2d.size_y = 0.002   # half of screen size in [m] in vertical plane\nscreen_2d.nx = 51          # number of points in horizontal plane \nscreen_2d.ny = 51          # number of points in vertical plane \n\n\nscreen_2d.start_energy = 7761.2 # [eV], starting photon energy\nscreen_2d.end_energy = 7761.2     # [eV], ending photon energy\nscreen_2d.num_energy = 1        # number of energy points[eV]\n\nscreen_2d = calculate_radiation(lat, screen_2d, beam)\n'})}),"\n",(0,a.jsx)("a",{id:"gen_dfl_2d"}),"\n",(0,a.jsx)(n.h3,{id:"converting-2d-screen-to-2d-radiationfield",children:"Converting 2D Screen to 2D RadiationField"}),"\n",(0,a.jsx)(n.p,{children:"to convert SR from Screen to RadiationField there is a function:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"dfl = screen2dfl(screen, polarization='x')"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"screen"}),": Screen object, electric field of which will be used to generate RadiationField"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"polarization"}),":  polarization for conversion to RadiationField (",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsxs)(n.msub,{children:[(0,a.jsx)(n.mi,{children:"E"}),(0,a.jsx)(n.mi,{children:"x"})]})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"E_x"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.8333em",verticalAlign:"-0.15em"}}),(0,a.jsxs)(n.span,{className:"mord",children:[(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.05764em"},children:"E"}),(0,a.jsx)(n.span,{className:"msupsub",children:(0,a.jsxs)(n.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(n.span,{className:"vlist-r",children:[(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.1514em"},children:(0,a.jsxs)(n.span,{style:{top:"-2.55em",marginLeft:"-0.0576em",marginRight:"0.05em"},children:[(0,a.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(n.span,{className:"mord mathnormal mtight",children:"x"})})]})}),(0,a.jsx)(n.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(n.span,{className:"vlist-r",children:(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(n.span,{})})})]})})]})]})})]})," or ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsxs)(n.msub,{children:[(0,a.jsx)(n.mi,{children:"E"}),(0,a.jsx)(n.mi,{children:"y"})]})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"E_y"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.9694em",verticalAlign:"-0.2861em"}}),(0,a.jsxs)(n.span,{className:"mord",children:[(0,a.jsx)(n.span,{className:"mord mathnormal",style:{marginRight:"0.05764em"},children:"E"}),(0,a.jsx)(n.span,{className:"msupsub",children:(0,a.jsxs)(n.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(n.span,{className:"vlist-r",children:[(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.1514em"},children:(0,a.jsxs)(n.span,{style:{top:"-2.55em",marginLeft:"-0.0576em",marginRight:"0.05em"},children:[(0,a.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(n.span,{className:"mord mathnormal mtight",style:{marginRight:"0.03588em"},children:"y"})})]})}),(0,a.jsx)(n.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(n.span,{className:"vlist-r",children:(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.2861em"},children:(0,a.jsx)(n.span,{})})})]})})]})]})})]}),")"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["see ",(0,a.jsx)(n.a,{href:"/docs/tutorial/tutorial-photons/pfs_2_radiation_field",children:"PFS tutorial N2. Coherent radiation module and RadiationField object"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"dfl_2d = screen2dfl(screen_2d, polarization='x') \n"})}),"\n",(0,a.jsx)("a",{id:"plot_dfl_2d"}),"\n",(0,a.jsx)(n.h3,{id:"plotting-radiationfield",children:"Plotting RadiationField"}),"\n",(0,a.jsx)(n.p,{children:"2D (monochromatic) RadiationFied generated from Screen"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"plot_dfl(dfl_2d,\n         fig_name='dfl_2d generated from screen_2d', \n         column_3d=1)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"png",src:i(4833).A+"",width:"1080",height:"1025"})}),"\n",(0,a.jsx)(n.p,{children:"The phase is oscillating very rapidly. Let's study the radiation back-propagated to the middle of the undulator"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"dfl_2d.prop_m(-100-3.5/2, m=0.02)\nplot_dfl(dfl_2d,\n         fig_name='dfl_2d generated from screen_2d')\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"png",src:i(5496).A+"",width:"1048",height:"1025"})}),"\n",(0,a.jsxs)(n.p,{children:["and now we can study transverse Wigner distribution of undulator radiation:\n(see ",(0,a.jsx)(n.a,{href:"https://link.aps.org/doi/10.1103/PhysRevSTAB.15.050703",children:"https://link.aps.org/doi/10.1103/PhysRevSTAB.15.050703"})," for reference)\nas the radiation propagates, is evolves, just like the transverse phase-space of an electron beam"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"wig = dfl2wig(dfl_2d, domain='x', pad=2)\nplot_wigner(wig)\n\nplot_wigner(dfl2wig(dfl_2d.prop_m(1, m=1, return_result=True), domain='x', pad=2)) #1m downstream the waist\nplot_wigner(dfl2wig(dfl_2d.prop_m(2, m=1, return_result=True), domain='x', pad=2)) #2m downstream the waist\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"png",src:i(8989).A+"",width:"1085",height:"808"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"png",src:i(7860).A+"",width:"1085",height:"814"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"png",src:i(9327).A+"",width:"1085",height:"808"})}),"\n",(0,a.jsx)("a",{id:"gen_screen_3d"}),"\n",(0,a.jsx)(n.h3,{id:"generating-and-converting-3d-screen",children:"Generating and converting 3D Screen"}),"\n",(0,a.jsx)(n.p,{children:"One can calculate series of 2D radiation field distributions at different photon energies."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# generating 3D synchrotron radiation (it will take up to 5 minutes as 75*75*20=112k datapoints are calculated)\nscreen_3d = Screen()\nscreen_3d.z = 100.0  # distance from the begining of lattice to the screen\nscreen_3d.size_x = 0.002  # half of screen size in [m] in horizontal plane\nscreen_3d.size_y = 0.002  # half of screen size in [m] in vertical plane\n\nscreen_3d.ny = 50\nscreen_3d.nx = 50\nscreen_3d.start_energy = 7720  # [eV], starting photon energy\nscreen_3d.end_energy = 7790  # [eV], ending photon energy\nscreen_3d.num_energy = 25  # number of energy points[eV]\n\nscreen_3d = calculate_radiation(lat, screen_3d, beam)\ndfl_3d = screen2dfl(screen_3d, polarization='x')\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"    SR 3D calculation\n"})}),"\n",(0,a.jsx)(n.p,{children:"In this way we obtain a 3D RadiationFied distribution in space-frequency domain"}),"\n",(0,a.jsx)(n.p,{children:"Note the spatial dependence on the photon energy. The slice values of x=0 and y=0 are provided as well as on-axis spectrum"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"plot_dfl(dfl_3d, \n         domains='sf',\n         fig_name='dfl_3d in space-frequency domain',\n         slice_xy=True) # bool type variable, if True, slices will be plotted; if False, projections will be plotted\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"png",src:i(3478).A+"",width:"1679",height:"1029"})}),"\n",(0,a.jsx)(n.p,{children:"Transverse projections and integrated spectrum"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"plot_dfl(dfl_3d, \n         domains='sf',\n         fig_name='dfl_3d in space-frequency domain',\n         slice_xy=False)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"png",src:i(4360).A+"",width:"1679",height:"1029"})}),"\n",(0,a.jsx)(n.p,{children:"Plotting in space-time domain yields pulse duration that is approximately the radiation wavelength (fundamental harmonic) times number of undulator periods\nThe expected pulse duration from a single electron at this harmonic should be about 0.08um."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"plot_dfl(dfl_3d,\n         domains='st',\n         fig_name='dfl_3d in space-time domain',\n         slice_xy=False)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"png",src:i(3266).A+"",width:"1679",height:"1025"})}),"\n",(0,a.jsx)(n.p,{children:"Radiation distribution in the middle of the undulator"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"plot_dfl(dfl_3d.prop_m(-100-3.5/2, m=0.02, fine=1, return_result=1),\n         domains='fs',\n         fig_name='dfl_3d at waist position in frequency-space domains',\n         slice_xy=False)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"png",src:i(3508).A+"",width:"1651",height:"1029"})}),"\n",(0,a.jsx)(n.p,{children:"Because of the rapidly-oscilalting phase, plotting in the far zone in not possible yet, to be solved in the future by subtracting spherical phase component"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"plot_dfl(dfl_3d,\n         domains='fk',\n         fig_name='dfl_3d at waist position in inverse space-frequency domains',\n         slice_xy=False)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"png",src:i(3774).A+"",width:"1675",height:"1029"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},4833:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/pfs_4_synchrotron_radiation_visualization_12_0-aa433e0799b48c434cbb759029d1f83d.png"},5496:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/pfs_4_synchrotron_radiation_visualization_14_0-d882b88457c2a455b41cafd16817e7a1.png"},8989:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/pfs_4_synchrotron_radiation_visualization_16_0-1a99b301d4089ef608eca20291705d15.png"},7860:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/pfs_4_synchrotron_radiation_visualization_16_1-ff0b14848d63bc39df3977f9a1d9ab14.png"},9327:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/pfs_4_synchrotron_radiation_visualization_16_2-4381ffe83d539c976be5edf927d9347e.png"},3478:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/pfs_4_synchrotron_radiation_visualization_20_0-1eec4765820b33f7ce1a8e073782e102.png"},4360:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/pfs_4_synchrotron_radiation_visualization_22_0-642bba5b73428010a84b21a8ca0f85c0.png"},3266:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/pfs_4_synchrotron_radiation_visualization_24_0-d49f5f9c735901dab2437a95725b8b80.png"},3508:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/pfs_4_synchrotron_radiation_visualization_26_0-04635628268ff58605b0112027bf802a.png"},3774:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/pfs_4_synchrotron_radiation_visualization_28_0-5919c3acae6d01caacc574b81172e9e5.png"},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var s=i(6540);const a={},t=s.createContext(a);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);