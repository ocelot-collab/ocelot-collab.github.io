"use strict";(self.webpackChunkocelot_website=self.webpackChunkocelot_website||[]).push([[9073],{9797:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"docu/physics-processes/apertures","title":"Aperture Classes","description":"This section documents three classes: PhaseSpaceAperture, RectAperture, and EllipticalAperture. These classes are used to cut or filter a beam of particles based on various geometrical apertures in the phase space.","source":"@site/docs/docu/physics-processes/apertures.md","sourceDirName":"docu/physics-processes","slug":"/docu/physics-processes/apertures","permalink":"/docs/docu/physics-processes/apertures","draft":false,"unlisted":false,"editUrl":"https://github.com/ocelot-collab/ocelot-collab.github.io/tree/main/docs/docu/physics-processes/apertures.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Aperture Classes"},"sidebar":"docsSidebar","previous":{"title":"Spontaneous Radiation Effect","permalink":"/docs/docu/physics-processes/sr-effect"},"next":{"title":"BeamTransform","permalink":"/docs/docu/physics-processes/beamtransform"}}');var l=i(4848),n=i(8453);const t={sidebar_position:8,title:"Aperture Classes"},a="Aperture Classes",c={},d=[{value:"PhaseSpaceAperture Class",id:"phasespaceaperture-class",level:2},{value:"Parameters:",id:"parameters",level:3},{value:"Methods:",id:"methods",level:3},{value:"<code>__init__(self, step=1)</code>",id:"__init__self-step1",level:4},{value:"<code>apply(self, p_array, dz)</code>",id:"applyself-p_array-dz",level:4},{value:"RectAperture Class",id:"rectaperture-class",level:2},{value:"Parameters:",id:"parameters-1",level:3},{value:"Methods:",id:"methods-1",level:3},{value:"<code>__init__(self, xmin=-np.inf, xmax=np.inf, ymin=-np.inf, ymax=np.inf, step=1)</code>",id:"__init__self-xmin-npinf-xmaxnpinf-ymin-npinf-ymaxnpinf-step1",level:4},{value:"<code>apply(self, p_array, dz)</code>",id:"applyself-p_array-dz-1",level:4},{value:"EllipticalAperture Class",id:"ellipticalaperture-class",level:2},{value:"Parameters:",id:"parameters-2",level:3},{value:"Methods:",id:"methods-2",level:3},{value:"<code>__init__(self, xmax=np.inf, ymax=None, dx=0.0, dy=0.0, step=1)</code>",id:"__init__self-xmaxnpinf-ymaxnone-dx00-dy00-step1",level:4},{value:"<code>apply(self, p_array, dz)</code>",id:"applyself-p_array-dz-2",level:4},{value:"Summary",id:"summary",level:2}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.header,{children:(0,l.jsx)(s.h1,{id:"aperture-classes",children:"Aperture Classes"})}),"\n",(0,l.jsxs)(s.p,{children:["This section documents three classes: ",(0,l.jsx)(s.code,{children:"PhaseSpaceAperture"}),", ",(0,l.jsx)(s.code,{children:"RectAperture"}),", and ",(0,l.jsx)(s.code,{children:"EllipticalAperture"}),". These classes are used to cut or filter a beam of particles based on various geometrical apertures in the phase space."]}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsxs)(s.h2,{id:"phasespaceaperture-class",children:[(0,l.jsx)(s.a,{href:"https://github.com/ocelot-collab/ocelot/blob/master/ocelot/cpbd/physics_proc.py#L254",children:"PhaseSpaceAperture"})," Class"]}),"\n",(0,l.jsxs)(s.p,{children:["The ",(0,l.jsx)(s.code,{children:"PhaseSpaceAperture"})," class cuts the beam in the longitudinal, horizontal, and vertical directions based on specified parameters."]}),"\n",(0,l.jsx)(s.h3,{id:"parameters",children:"Parameters:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"longitudinal"})," (",(0,l.jsx)(s.code,{children:"bool"}),"): If ",(0,l.jsx)(s.code,{children:"True"}),", cuts the beam in the longitudinal direction (default is ",(0,l.jsx)(s.code,{children:"True"}),")."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"vertical"})," (",(0,l.jsx)(s.code,{children:"bool"}),"): If ",(0,l.jsx)(s.code,{children:"True"}),", cuts the beam in the vertical direction (default is ",(0,l.jsx)(s.code,{children:"False"}),")."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"horizontal"})," (",(0,l.jsx)(s.code,{children:"bool"}),"): If ",(0,l.jsx)(s.code,{children:"True"}),", cuts the beam in the horizontal direction (default is ",(0,l.jsx)(s.code,{children:"False"}),")."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"taumin"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Minimum longitudinal value in [rms] from the center of mass (default is -5)."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"taumax"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Maximum longitudinal value in [rms] from the center of mass (default is 5)."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"xmin"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Minimum horizontal value in [rms] from the center of mass (default is -5)."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"xmax"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Maximum horizontal value in [rms] from the center of mass (default is 5)."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"ymin"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Minimum vertical value in [rms] from the center of mass (default is -5)."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"ymax"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Maximum vertical value in [rms] from the center of mass (default is 5)."]}),"\n"]}),"\n",(0,l.jsx)(s.h3,{id:"methods",children:"Methods:"}),"\n",(0,l.jsx)(s.h4,{id:"__init__self-step1",children:(0,l.jsx)(s.code,{children:"__init__(self, step=1)"})}),"\n",(0,l.jsxs)(s.p,{children:["Constructor to initialize the ",(0,l.jsx)(s.code,{children:"PhaseSpaceAperture"})," class with default or user-specified values."]}),"\n",(0,l.jsx)(s.h4,{id:"applyself-p_array-dz",children:(0,l.jsx)(s.code,{children:"apply(self, p_array, dz)"})}),"\n",(0,l.jsx)(s.p,{children:"Applies the aperture cut to the particles in the phase space. It deletes particles that fall outside the specified longitudinal, horizontal, and vertical apertures."}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsxs)(s.h2,{id:"rectaperture-class",children:[(0,l.jsx)(s.a,{href:"https://github.com/ocelot-collab/ocelot/blob/master/ocelot/cpbd/physics_proc.py#L316",children:"RectAperture"})," Class"]}),"\n",(0,l.jsxs)(s.p,{children:["The ",(0,l.jsx)(s.code,{children:"RectAperture"})," class cuts the beam in the horizontal and/or vertical direction based on rectangular apertures."]}),"\n",(0,l.jsx)(s.h3,{id:"parameters-1",children:"Parameters:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"xmin"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Minimum horizontal plane in [m] (default is ",(0,l.jsx)(s.code,{children:"-np.inf"}),")."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"xmax"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Maximum horizontal plane in [m] (default is ",(0,l.jsx)(s.code,{children:"np.inf"}),")."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"ymin"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Minimum vertical plane in [m] (default is ",(0,l.jsx)(s.code,{children:"-np.inf"}),")."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"ymax"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Maximum vertical plane in [m] (default is ",(0,l.jsx)(s.code,{children:"np.inf"}),")."]}),"\n"]}),"\n",(0,l.jsx)(s.h3,{id:"methods-1",children:"Methods:"}),"\n",(0,l.jsx)(s.h4,{id:"__init__self-xmin-npinf-xmaxnpinf-ymin-npinf-ymaxnpinf-step1",children:(0,l.jsx)(s.code,{children:"__init__(self, xmin=-np.inf, xmax=np.inf, ymin=-np.inf, ymax=np.inf, step=1)"})}),"\n",(0,l.jsxs)(s.p,{children:["Constructor to initialize the ",(0,l.jsx)(s.code,{children:"RectAperture"})," class with default or user-specified values."]}),"\n",(0,l.jsx)(s.h4,{id:"applyself-p_array-dz-1",children:(0,l.jsx)(s.code,{children:"apply(self, p_array, dz)"})}),"\n",(0,l.jsx)(s.p,{children:"Applies the rectangular aperture cut to the particles. It deletes particles that are outside the specified horizontal and vertical ranges."}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsxs)(s.h2,{id:"ellipticalaperture-class",children:[(0,l.jsx)(s.a,{href:"https://github.com/ocelot-collab/ocelot/blob/master/ocelot/cpbd/physics_proc.py#L349",children:"EllipticalAperture"})," Class"]}),"\n",(0,l.jsxs)(s.p,{children:["The ",(0,l.jsx)(s.code,{children:"EllipticalAperture"})," class cuts the beam based on an elliptical aperture with semi-axes ",(0,l.jsx)(s.code,{children:"xmax"})," and ",(0,l.jsx)(s.code,{children:"ymax"}),"."]}),"\n",(0,l.jsx)(s.h3,{id:"parameters-2",children:"Parameters:"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"xmax"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Horizontal semi-axis in [m] (default is ",(0,l.jsx)(s.code,{children:"np.inf"}),")."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"ymax"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Vertical semi-axis in [m] (default is ",(0,l.jsx)(s.code,{children:"None"}),", in which case ",(0,l.jsx)(s.code,{children:"ymax"})," equals ",(0,l.jsx)(s.code,{children:"xmax"}),", creating a circular aperture)."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"dx"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Offset in the horizontal direction in [m] (default is 0.0)."]}),"\n",(0,l.jsxs)(s.li,{children:[(0,l.jsx)(s.strong,{children:"dy"})," (",(0,l.jsx)(s.code,{children:"float"}),"): Offset in the vertical direction in [m] (default is 0.0)."]}),"\n"]}),"\n",(0,l.jsx)(s.h3,{id:"methods-2",children:"Methods:"}),"\n",(0,l.jsx)(s.h4,{id:"__init__self-xmaxnpinf-ymaxnone-dx00-dy00-step1",children:(0,l.jsx)(s.code,{children:"__init__(self, xmax=np.inf, ymax=None, dx=0.0, dy=0.0, step=1)"})}),"\n",(0,l.jsxs)(s.p,{children:["Constructor to initialize the ",(0,l.jsx)(s.code,{children:"EllipticalAperture"})," class with default or user-specified values."]}),"\n",(0,l.jsx)(s.h4,{id:"applyself-p_array-dz-2",children:(0,l.jsx)(s.code,{children:"apply(self, p_array, dz)"})}),"\n",(0,l.jsx)(s.p,{children:"Applies the elliptical aperture cut to the particles. It deletes particles that are outside the specified elliptical region."}),"\n",(0,l.jsx)(s.hr,{}),"\n",(0,l.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,l.jsxs)(s.ul,{children:["\n",(0,l.jsxs)(s.li,{children:["The ",(0,l.jsx)(s.code,{children:"PhaseSpaceAperture"})," class is used for cutting the beam in the longitudinal, horizontal, or vertical directions based on the specified RMS values."]}),"\n",(0,l.jsxs)(s.li,{children:["The ",(0,l.jsx)(s.code,{children:"RectAperture"})," class cuts the beam in horizontal and vertical directions using rectangular boundaries."]}),"\n",(0,l.jsxs)(s.li,{children:["The ",(0,l.jsx)(s.code,{children:"EllipticalAperture"})," class cuts the beam based on an elliptical aperture, with optional offset in the horizontal and vertical directions."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},8453:(e,s,i)=>{i.d(s,{R:()=>t,x:()=>a});var r=i(6540);const l={},n=r.createContext(l);function t(e){const s=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),r.createElement(n.Provider,{value:s},e.children)}}}]);