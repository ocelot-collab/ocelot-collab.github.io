"use strict";(self.webpackChunkocelot_website=self.webpackChunkocelot_website||[]).push([[3426],{835:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"docu/how-to/phys_proc","title":"Create Your Own Physics Process","description":"Learn how to implement custom physics processes in Ocelot.","source":"@site/docs/docu/how-to/phys_proc.md","sourceDirName":"docu/how-to","slug":"/docu/how-to/phys_proc","permalink":"/docs/docu/how-to/phys_proc","draft":false,"unlisted":false,"editUrl":"https://github.com/ocelot-collab/ocelot-collab.github.io/tree/main/docs/docu/how-to/phys_proc.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Create Your Own Physics Process","sidebar_position":3,"description":"Learn how to implement custom physics processes in Ocelot."},"sidebar":"docsSidebar","previous":{"title":"Add Unit Test","permalink":"/docs/docu/how-to/unit_test"}}');var r=i(4848),c=i(8453);const t={title:"Create Your Own Physics Process",sidebar_position:3,description:"Learn how to implement custom physics processes in Ocelot."},o="How to Create Your Own Physics Process",a={},l=[{value:"Base Class: <code>PhysProc</code>",id:"base-class-physproc",level:2},{value:"Key Methods:",id:"key-methods",level:3},{value:"Key Attributes (set automatically by <code>Navigator.add_physics_proc()</code>):",id:"key-attributes-set-automatically-by-navigatoradd_physics_proc",level:3},{value:"Step Validation",id:"step-validation",level:3},{value:"Minimal Example:",id:"minimal-example",level:3},{value:"Extended Example with prepare and finalize:",id:"extended-example-with-prepare-and-finalize",level:3},{value:"\u2705 Quick Guidelines",id:"-quick-guidelines",level:2},{value:"\ud83d\udd17 Full Tutorial",id:"-full-tutorial",level:2}];function d(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"how-to-create-your-own-physics-process",children:"How to Create Your Own Physics Process"})}),"\n",(0,r.jsxs)(s.p,{children:["Ocelot provides a flexible interface to define and implement custom physics processes by extending the base class ",(0,r.jsx)(s.code,{children:"PhysProc"}),". This allows you to simulate effects such as wakefields, CSR, space charge, or any other custom modification during beam tracking."]}),"\n",(0,r.jsxs)(s.h2,{id:"base-class-physproc",children:["Base Class: ",(0,r.jsx)(s.a,{href:"/docs/docu/physics-processes/phys-proc",children:(0,r.jsx)(s.code,{children:"PhysProc"})})]}),"\n",(0,r.jsxs)(s.p,{children:["All physics processes should inherit from the ",(0,r.jsx)(s.a,{href:"/docs/docu/physics-processes/phys-proc",children:(0,r.jsx)(s.code,{children:"PhysProc"})})," class. Here's an overview of its interface and behavior:"]}),"\n",(0,r.jsx)(s.h3,{id:"key-methods",children:"Key Methods:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"apply(self, p_array, dz)"})," \u2014 ",(0,r.jsx)(s.strong,{children:"required"}),". This method is called on every simulation step to apply your custom logic to the ",(0,r.jsx)(s.a,{href:"/docs/docu/OCELOT%20fundamentals/particle-array",children:(0,r.jsx)(s.code,{children:"ParticleArray"})}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"prepare(self, lat)"})," ",(0,r.jsx)(s.em,{children:"(optional)"})," \u2014 called once when the process is added to the ",(0,r.jsx)(s.a,{href:"/docs/docu/OCELOT%20fundamentals/navigator",children:(0,r.jsx)(s.code,{children:"Navigator"})}),". By default, it checks that ",(0,r.jsx)(s.code,{children:"step"})," is an integer. Override it if you need to precompute data (e.g., ",(0,r.jsx)(s.a,{href:"/docs/docu/physics-processes/csr",children:"CSR"})," trajectory)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"finalize(self, *args, **kwargs)"})," ",(0,r.jsx)(s.em,{children:"(optional)"})," \u2014 called at the end of tracking. You can override it to save computed data or perform cleanup (e.g. in ",(0,r.jsx)(s.a,{href:"/docs/docu/physics-processes/beam-analysis",children:"Beam Analysis"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(s.h3,{id:"key-attributes-set-automatically-by-navigatoradd_physics_proc",children:["Key Attributes (set automatically by ",(0,r.jsx)(s.code,{children:"Navigator.add_physics_proc()"}),"):"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"step"}),": how often to apply the process (in units of ",(0,r.jsx)(s.code,{children:"Navigator.unit_step"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"energy"}),": beam energy, can be set manually if needed"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"indx0"}),", ",(0,r.jsx)(s.code,{children:"indx1"}),": indices of the start and stop elements in ",(0,r.jsx)(s.code,{children:"lattice.sequence"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"s_start"}),", ",(0,r.jsx)(s.code,{children:"s_stop"}),": start and stop positions along the lattice"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"z0"}),": current longitudinal position during tracking (set just before ",(0,r.jsx)(s.code,{children:"apply()"})," is called)"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"step-validation",children:"Step Validation"}),"\n",(0,r.jsxs)(s.p,{children:["The method ",(0,r.jsx)(s.code,{children:"check_step()"})," ensures that ",(0,r.jsx)(s.code,{children:"step"})," is an integer. This is called automatically in the default ",(0,r.jsx)(s.code,{children:"prepare()"})," implementation:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'if not (self.step * 1.).is_integer():\n    raise ValueError("step must be an integer number")\n'})}),"\n",(0,r.jsx)(s.h3,{id:"minimal-example",children:"Minimal Example:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from ocelot import PhysProc\n\nclass MyProcess(PhysProc):\n    def apply(self, p_array, dz):\n        # Modify the particle array during tracking\n        pass\n"})}),"\n",(0,r.jsx)(s.h3,{id:"extended-example-with-prepare-and-finalize",children:"Extended Example with prepare and finalize:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"class MyProcess(PhysProc):\n    def prepare(self, lat):\n        super().prepare(lat)\n        # Setup or trajectory pre-calculation\n\n    def apply(self, p_array, dz):\n        # Main tracking logic\n        pass\n\n    def finalize(self, *args, **kwargs):\n        # Save data or diagnostics\n        pass\n"})}),"\n",(0,r.jsx)(s.p,{children:"To use your process:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"proc = MyProcess()\nnavi = Navigator(lattice)\nnavi.add_physics_proc(proc, start_element, stop_element)\n"})}),"\n",(0,r.jsx)(s.h2,{id:"-quick-guidelines",children:"\u2705 Quick Guidelines"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Inherit from ",(0,r.jsx)(s.code,{children:"PhysProc"})]}),"\n",(0,r.jsxs)(s.li,{children:["Implement ",(0,r.jsx)(s.code,{children:"apply()"})," \u2014 it is mandatory"]}),"\n",(0,r.jsxs)(s.li,{children:["Use ",(0,r.jsx)(s.code,{children:"prepare()"})," if you need to initialize anything before tracking","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Example: ",(0,r.jsx)(s.a,{href:"/docs/docu/physics-processes/csr",children:"CSR physics process"})," calculates the beam trajectory in ",(0,r.jsx)(s.code,{children:"prepare()"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["Use ",(0,r.jsx)(s.code,{children:"finalize()"})," to store or analyze data after tracking","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Example: ",(0,r.jsx)(s.a,{href:"/docs/docu/physics-processes/beam-analysis",children:"Beam Analysis"})," stores statistics in ",(0,r.jsx)(s.code,{children:"finalize()"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["Use attributes like ",(0,r.jsx)(s.code,{children:"z0"}),", ",(0,r.jsx)(s.code,{children:"energy"}),", ",(0,r.jsx)(s.code,{children:"s_start"})," during tracking for reference"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"-full-tutorial",children:"\ud83d\udd17 Full Tutorial"}),"\n",(0,r.jsx)(s.p,{children:"A complete working example is provided in the tutorial:"}),"\n",(0,r.jsxs)(s.p,{children:["\ud83d\udc49 ",(0,r.jsx)(s.a,{href:"/docs/tutorial/tutorial-beam-dynamics/laser_heater",children:"Laser Heater Physics Process Tutorial"})]}),"\n",(0,r.jsx)(s.p,{children:"This tutorial demonstrates how to:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Implement and register a custom process"}),"\n",(0,r.jsx)(s.li,{children:"Modify the beam distribution"}),"\n",(0,r.jsx)(s.li,{children:"Track effects over specific sections of a lattice"}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.p,{children:"If you have questions or want to contribute your own physics models, feel free to open a pull request or start a discussion!"})]})}function h(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,i)=>{i.d(s,{R:()=>t,x:()=>o});var n=i(6540);const r={},c=n.createContext(r);function t(e){const s=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);